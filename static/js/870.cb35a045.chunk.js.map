{"version":3,"file":"static/js/870.cb35a045.chunk.js","mappings":"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","sources":["hooks/chainIcons/Arbitrum.js","hooks/chainIcons/Avalanche.js","hooks/chainIcons/Ethereum.js","hooks/chainIcons/Hardhat.js","hooks/chainIcons/Optimism.js","hooks/chainIcons/Polygon.js","components/SideNav.js","hooks/chainIcons/XDC.js","hooks/chainIcons/index.js","components/CollectionSelect1155.js","components/AppBar.js","components/Loading.js","components/MainContainer.js","components/PleaseCreateContract.js","components/ManageableNFTCard.js","pages/manageNFT.js","utils/ipfsUpload.js","pages/create1155NFT.js","components/MintableNFTCard.js","pages/metamaskInstall.js","pages/mintingPage.js","pages/settings.js","pages/about.js","pages/NotFound.js","routes.js","router.js"],"sourcesContent":["import * as React from \"react\";\r\nconst SvgArbitrum = (props) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width={28}\r\n    height={28}\r\n    fill=\"none\"\r\n    {...props}\r\n  >\r\n    <rect\r\n      width={26.6}\r\n      height={26.6}\r\n      x={0.7}\r\n      y={0.7}\r\n      fill=\"#2D374B\"\r\n      stroke=\"#96BEDC\"\r\n      strokeWidth={1.4}\r\n      rx={13.3}\r\n    />\r\n    <mask\r\n      id=\"arbitrum_svg__a\"\r\n      width={28}\r\n      height={28}\r\n      x={0}\r\n      y={0}\r\n      maskUnits=\"userSpaceOnUse\"\r\n      style={{\r\n        maskType: \"alpha\",\r\n      }}\r\n    >\r\n      <rect width={28} height={28} fill=\"#C4C4C4\" rx={14} />\r\n    </mask>\r\n    <g mask=\"url(#arbitrum_svg__a)\">\r\n      <path\r\n        fill=\"#28A0F0\"\r\n        d=\"m14.086 18.604 6.502 10.224 4.005-2.321-7.86-12.395-2.647 4.492Zm13.075 3.47-.004-1.86-7.306-11.408-2.309 3.918 7.091 11.43 2.172-1.259a.963.963 0 0 0 .356-.7v-.122Z\"\r\n      />\r\n      <rect\r\n        width={25.9}\r\n        height={25.9}\r\n        x={1.05}\r\n        y={1.05}\r\n        fill=\"url(#arbitrum_svg__b)\"\r\n        fillOpacity={0.3}\r\n        stroke=\"#96BEDC\"\r\n        strokeWidth={2.1}\r\n        rx={12.95}\r\n      />\r\n      <path\r\n        fill=\"#fff\"\r\n        d=\"m.363 28.22-3.07-1.767-.234-.833L7.746 9.02c.73-1.192 2.32-1.576 3.796-1.555l1.732.046-12.91 20.71ZM19.166 7.512l-4.566.017L2.24 27.953l3.61 2.08.982-1.666L19.166 7.51Z\"\r\n      />\r\n    </g>\r\n    <defs>\r\n      <linearGradient\r\n        id=\"arbitrum_svg__b\"\r\n        x1={0}\r\n        x2={14}\r\n        y1={0}\r\n        y2={28}\r\n        gradientUnits=\"userSpaceOnUse\"\r\n      >\r\n        <stop stopColor=\"#fff\" />\r\n        <stop offset={1} stopColor=\"#fff\" stopOpacity={0} />\r\n      </linearGradient>\r\n    </defs>\r\n  </svg>\r\n);\r\nexport default SvgArbitrum;\r\n","import * as React from \"react\";\r\nconst SvgAvalanche = (props) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width={28}\r\n    height={28}\r\n    fill=\"none\"\r\n    {...props}\r\n  >\r\n    <path fill=\"#fff\" d=\"M23 5H5v18h18V5Z\" />\r\n    <path\r\n      fill=\"#E84142\"\r\n      fillRule=\"evenodd\"\r\n      d=\"M14 28c-7.513.008-14-6.487-14-14C0 6.196 6.043-.008 14 0c7.95.008 14 6.196 14 14 0 7.505-6.495 13.992-14 14Zm-3.971-7.436H7.315c-.57 0-.851 0-1.023-.11a.69.69 0 0 1-.313-.54c-.01-.202.13-.45.412-.944l6.7-11.809c.285-.501.43-.752.612-.845.195-.1.429-.1.625 0 .182.093.326.344.611.845l1.377 2.404.007.013c.308.538.464.81.533 1.097a2.04 2.04 0 0 1 0 .954c-.07.289-.224.564-.536 1.11l-3.52 6.22-.009.017c-.31.542-.467.817-.684 1.024a2.048 2.048 0 0 1-.835.485c-.285.079-.604.079-1.243.079Zm6.852 0h3.888c.574 0 .862 0 1.034-.113a.687.687 0 0 0 .313-.543c.01-.196-.128-.434-.398-.9a8.198 8.198 0 0 1-.028-.048l-1.948-3.332-.022-.037c-.274-.463-.412-.697-.59-.787a.684.684 0 0 0-.621 0c-.179.093-.323.337-.608.828l-1.94 3.331-.007.012c-.284.49-.426.735-.416.936.014.22.127.423.313.543.168.11.456.11 1.03.11Z\"\r\n      clipRule=\"evenodd\"\r\n    />\r\n  </svg>\r\n);\r\nexport default SvgAvalanche;\r\n","import * as React from \"react\";\r\nconst SvgEthereum = (props) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width={28}\r\n    height={28}\r\n    fill=\"none\"\r\n    {...props}\r\n  >\r\n    <path\r\n      fill=\"#25292E\"\r\n      fillRule=\"evenodd\"\r\n      d=\"M14 28a14 14 0 1 0 0-28 14 14 0 0 0 0 28Z\"\r\n      clipRule=\"evenodd\"\r\n    />\r\n    <path\r\n      fill=\"url(#ethereum_svg__a)\"\r\n      fillOpacity={0.3}\r\n      fillRule=\"evenodd\"\r\n      d=\"M14 28a14 14 0 1 0 0-28 14 14 0 0 0 0 28Z\"\r\n      clipRule=\"evenodd\"\r\n    />\r\n    <path\r\n      fill=\"url(#ethereum_svg__b)\"\r\n      d=\"M8.19 14.77 14 18.21l5.8-3.44-5.8 8.19-5.81-8.19Z\"\r\n    />\r\n    <path fill=\"#fff\" d=\"m14 16.93-5.81-3.44L14 4.34l5.81 9.15L14 16.93Z\" />\r\n    <defs>\r\n      <linearGradient\r\n        id=\"ethereum_svg__a\"\r\n        x1={0}\r\n        x2={14}\r\n        y1={0}\r\n        y2={28}\r\n        gradientUnits=\"userSpaceOnUse\"\r\n      >\r\n        <stop stopColor=\"#fff\" />\r\n        <stop offset={1} stopColor=\"#fff\" stopOpacity={0} />\r\n      </linearGradient>\r\n      <linearGradient\r\n        id=\"ethereum_svg__b\"\r\n        x1={14}\r\n        x2={14}\r\n        y1={14.77}\r\n        y2={22.96}\r\n        gradientUnits=\"userSpaceOnUse\"\r\n      >\r\n        <stop stopColor=\"#fff\" />\r\n        <stop offset={1} stopColor=\"#fff\" stopOpacity={0.9} />\r\n      </linearGradient>\r\n    </defs>\r\n  </svg>\r\n);\r\nexport default SvgEthereum;\r\n","import * as React from \"react\";\r\nconst SvgHardhat = (props) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width={28}\r\n    height={28}\r\n    fill=\"none\"\r\n    {...props}\r\n  >\r\n    <rect width={28} height={28} fill=\"url(#hardhat_svg__a)\" rx={14} />\r\n    <g clipPath=\"url(#hardhat_svg__b)\">\r\n      <path\r\n        fill=\"#FFF100\"\r\n        d=\"M22.458 18.409v-.875c0-.162-.258-.317-.72-.457l.011-1.088c0-1.676-.49-3.312-1.402-4.685a7.833 7.833 0 0 0-3.702-2.994l-.033-.218a.639.639 0 0 0-.138-.315.592.592 0 0 0-.277-.188 7.429 7.429 0 0 0-4.395 0 .592.592 0 0 0-.278.188.64.64 0 0 0-.14.315l-.031.203a7.83 7.83 0 0 0-3.727 2.991 8.474 8.474 0 0 0-1.414 4.703v1.093c-.456.139-.71.292-.71.454v.874a.224.224 0 0 0 .03.147c.227-.178.487-.303.764-.366.704-.181 1.42-.307 2.143-.378.202-.024.407-.003.601.063s.372.174.523.318a2.945 2.945 0 0 0 2.043.836h4.748c.756 0 1.485-.299 2.043-.836a1.42 1.42 0 0 1 .522-.32c.194-.067.4-.09.602-.066a14.2 14.2 0 0 1 2.143.376c.262.053.51.167.724.334.012.013.027.024.037.036a.227.227 0 0 0 .033-.145Z\"\r\n      />\r\n      <path\r\n        fill=\"url(#hardhat_svg__c)\"\r\n        d=\"M9.574 16.569c-.006-.2-.01-.402-.01-.604.003-3.04.677-5.765 1.79-7.668a7.83 7.83 0 0 0-3.728 2.99 8.474 8.474 0 0 0-1.414 4.702v1.093a17.98 17.98 0 0 1 3.362-.513Z\"\r\n      />\r\n      <path\r\n        fill=\"url(#hardhat_svg__d)\"\r\n        d=\"M21.749 15.989a8.409 8.409 0 0 0-1.773-5.199c.498 1.674.746 3.42.735 5.173 0 .296-.008.59-.02.88a9.2 9.2 0 0 1 1.045.234l.013-1.088Z\"\r\n      />\r\n      <path\r\n        fill=\"url(#hardhat_svg__e)\"\r\n        d=\"M21.664 18.187c-.705-.18-1.42-.306-2.143-.377a1.365 1.365 0 0 0-.602.064 1.416 1.416 0 0 0-.523.32 2.943 2.943 0 0 1-2.043.835h-4.745a2.945 2.945 0 0 1-2.043-.835 1.417 1.417 0 0 0-.522-.322 1.366 1.366 0 0 0-.602-.065 14.18 14.18 0 0 0-2.143.377 1.962 1.962 0 0 0-.764.367c.36.58 4.006 1.19 8.448 1.19s8.086-.612 8.447-1.19c-.013-.012-.027-.023-.037-.035a1.8 1.8 0 0 0-.728-.329Z\"\r\n      />\r\n      <path fill=\"#0A0A0A\" d=\"m13.98 9.823-1.818 3.258 1.817 1.188V9.824Z\" />\r\n      <path\r\n        fill=\"#4B4D4D\"\r\n        d=\"M13.98 9.824v4.444l1.817-1.186-1.817-3.258Zm0 5.09v1.55c.034-.052 1.817-2.738 1.817-2.74l-1.817 1.19Z\"\r\n      />\r\n      <path fill=\"#0A0A0A\" d=\"m13.98 14.914-1.818-1.187 1.818 2.737v-1.55Z\" />\r\n    </g>\r\n    <defs>\r\n      <linearGradient\r\n        id=\"hardhat_svg__a\"\r\n        x1={14}\r\n        x2={14}\r\n        y1={0}\r\n        y2={28}\r\n        gradientUnits=\"userSpaceOnUse\"\r\n      >\r\n        <stop stopColor=\"#F7F1FD\" />\r\n        <stop offset={1} stopColor=\"#FBFCDC\" />\r\n      </linearGradient>\r\n      <linearGradient\r\n        id=\"hardhat_svg__c\"\r\n        x1={8.783}\r\n        x2={8.783}\r\n        y1={17.082}\r\n        y2={8.297}\r\n        gradientUnits=\"userSpaceOnUse\"\r\n      >\r\n        <stop stopColor=\"#EDCF00\" />\r\n        <stop offset={0.33} stopColor=\"#F0D500\" />\r\n        <stop offset={0.77} stopColor=\"#F9E500\" />\r\n        <stop offset={1} stopColor=\"#FFF100\" />\r\n      </linearGradient>\r\n      <linearGradient\r\n        id=\"hardhat_svg__d\"\r\n        x1={20.862}\r\n        x2={20.862}\r\n        y1={17.146}\r\n        y2={10.79}\r\n        gradientUnits=\"userSpaceOnUse\"\r\n      >\r\n        <stop stopColor=\"#EDCF00\" />\r\n        <stop offset={0.59} stopColor=\"#F7E100\" />\r\n        <stop offset={1} stopColor=\"#FFF100\" />\r\n      </linearGradient>\r\n      <radialGradient\r\n        id=\"hardhat_svg__e\"\r\n        cx={0}\r\n        cy={0}\r\n        r={1}\r\n        gradientTransform=\"matrix(6.30353 0 0 6.64935 6.45 23.084)\"\r\n        gradientUnits=\"userSpaceOnUse\"\r\n      >\r\n        <stop stopColor=\"#FFF100\" />\r\n        <stop offset={0.23} stopColor=\"#F9E500\" />\r\n        <stop offset={0.67} stopColor=\"#F0D500\" />\r\n        <stop offset={1} stopColor=\"#EDCF00\" />\r\n      </radialGradient>\r\n      <clipPath id=\"hardhat_svg__b\">\r\n        <path fill=\"#fff\" d=\"M0 0h17v13H0z\" transform=\"translate(5.5 7)\" />\r\n      </clipPath>\r\n    </defs>\r\n  </svg>\r\n);\r\nexport default SvgHardhat;\r\n","import * as React from \"react\";\r\nconst SvgOptimism = (props) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width={28}\r\n    height={28}\r\n    fill=\"none\"\r\n    {...props}\r\n  >\r\n    <rect width={28} height={28} fill=\"#FF3131\" rx={14} />\r\n    <rect\r\n      width={28}\r\n      height={28}\r\n      fill=\"url(#optimism_svg__a)\"\r\n      fillOpacity={0.3}\r\n      rx={14}\r\n    />\r\n    <path\r\n      fill=\"#fff\"\r\n      d=\"M9.22 18.35c2.7 0 4.86-2.2 4.86-5.38 0-2.19-1.47-3.8-3.98-3.8-2.72 0-4.85 2.2-4.85 5.38 0 2.2 1.5 3.8 3.97 3.8Zm.83-7.35c1.06 0 1.74.81 1.74 2.1 0 1.9-1.11 3.42-2.51 3.42-1.06 0-1.74-.82-1.74-2.1 0-1.89 1.11-3.42 2.5-3.42Zm6.38-1.68-1.88 8.88h2.26l.55-2.6h1.47c2.43 0 4.01-1.38 4.01-3.6 0-1.61-1.17-2.68-3.1-2.68h-3.3Zm1.9 1.74h.94c.83 0 1.3.38 1.3 1.14 0 1-.68 1.7-1.74 1.7h-1.11l.6-2.84Z\"\r\n    />\r\n    <defs>\r\n      <linearGradient\r\n        id=\"optimism_svg__a\"\r\n        x1={0}\r\n        x2={14}\r\n        y1={0}\r\n        y2={28}\r\n        gradientUnits=\"userSpaceOnUse\"\r\n      >\r\n        <stop stopColor=\"#fff\" />\r\n        <stop offset={1} stopColor=\"#fff\" stopOpacity={0} />\r\n      </linearGradient>\r\n    </defs>\r\n  </svg>\r\n);\r\nexport default SvgOptimism;\r\n","import * as React from \"react\";\r\nconst SvgPolygon = (props) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width={28}\r\n    height={28}\r\n    fill=\"none\"\r\n    {...props}\r\n  >\r\n    <rect width={28} height={28} fill=\"#8247E5\" rx={14} />\r\n    <rect\r\n      width={28}\r\n      height={28}\r\n      fill=\"url(#polygon_svg__a)\"\r\n      fillOpacity={0.3}\r\n      rx={14}\r\n    />\r\n    <path\r\n      fill=\"#fff\"\r\n      d=\"M18.28 10.92a1.06 1.06 0 0 0-1.06 0l-2.41 1.42-1.65.93-2.41 1.43c-.31.19-.72.19-1.06 0l-1.92-1.12a1.07 1.07 0 0 1-.53-.9v-2.2a1 1 0 0 1 .53-.9l1.9-1.08c.3-.18.7-.18 1.04 0l1.9 1.09c.3.18.52.52.52.9v1.42l1.64-.96V9.52a1 1 0 0 0-.52-.9l-3.5-2.04a1.06 1.06 0 0 0-1.06 0L6.13 8.63a1 1 0 0 0-.53.9v4.12a1 1 0 0 0 .53.9l3.56 2.04c.31.19.71.19 1.06 0l2.41-1.4 1.65-.95 2.41-1.4c.31-.19.72-.19 1.06 0l1.89 1.09c.3.18.53.52.53.9v2.2a1 1 0 0 1-.53.9l-1.9 1.11c-.3.19-.7.19-1.05 0l-1.89-1.08a1.07 1.07 0 0 1-.52-.9v-1.43l-1.65.96v1.43a1 1 0 0 0 .53.9l3.56 2.04c.31.19.72.19 1.06 0l3.56-2.04c.31-.19.53-.53.53-.9v-4.13a1 1 0 0 0-.53-.9l-3.6-2.07Z\"\r\n    />\r\n    <defs>\r\n      <linearGradient\r\n        id=\"polygon_svg__a\"\r\n        x1={0}\r\n        x2={14}\r\n        y1={0}\r\n        y2={28}\r\n        gradientUnits=\"userSpaceOnUse\"\r\n      >\r\n        <stop stopColor=\"#fff\" />\r\n        <stop offset={1} stopColor=\"#fff\" stopOpacity={0} />\r\n      </linearGradient>\r\n    </defs>\r\n  </svg>\r\n);\r\nexport default SvgPolygon;\r\n","\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport React from \"react\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport { Divider } from '@mui/material';\r\n\r\n// interface SideNavProps {\r\n//     value: number\r\n//     handleChange: (_: React.SyntheticEvent, newValue: number) => void\r\n// }\r\n\r\nexport default function SideNav({ value, handleChange }) {\r\n\r\n    // const [value, setValue] = React.useState(0);\r\n\r\n    // const handleChange = (_, newValue) => {\r\n    //     setValue(newValue);\r\n    // };\r\n\r\n    // really stupid bug\r\n    // https://github.com/mui/material-ui/issues/32749\r\n    // useEffect(() => {\r\n    //     // setTimeout(()=>{\r\n    //     //     setValue(1)\r\n\r\n    //     // },4000)\r\n    //     setValue(value)\r\n    // }, [value])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Toolbar />\r\n            <Divider />\r\n            <Tabs\r\n                orientation=\"vertical\"\r\n                variant=\"scrollable\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-label=\"Vertical tabs example\"\r\n                sx={{ borderRight: 1, borderColor: \"divider\" }}\r\n            >\r\n                {/* <Tab label=\"Create Collection\" to=\"/CreateCollection\" component={NavLink} /> */}\r\n                <Tab label=\"Create NFT\" to=\"/CreateNFT\" component={NavLink} />\r\n                <Tab label=\"Manage NFT\" to=\"/ManageNFT\" component={NavLink} />\r\n                <Tab label=\"Minting Page\" to=\"/MintingPage\" component={NavLink} />\r\n                <Tab label=\"Settings\" to=\"/Settings\" component={NavLink} />\r\n                <Tab label=\"About\" to=\"/\" component={NavLink} />\r\n                {/* <Tab label=\"Item Five\" to=\"/\" component={Link} />\r\n                <Tab label=\"Item Six\" to=\"/\" component={Link} />\r\n                <Tab label=\"Item Seven\" to=\"/\" component={Link} /> */}\r\n            </Tabs>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\n// {/* <Tabs\r\n//   orientation=\"vertical\"\r\n//   variant=\"scrollable\"\r\n//   value={value}\r\n//   onChange={handleChange}\r\n//   aria-label=\"Vertical tabs example\"\r\n//   sx={{ borderRight: 1, borderColor: \"divider\" }}\r\n// >\r\n//   <Tab label='Wallet' to='/' component={Link} />\r\n//   <Tab label=\"Item One\" />\r\n//   <Tab label=\"Item Two\" />\r\n//   <Tab label=\"Item Three\" />\r\n//   <Tab label=\"Item Four\" />\r\n//   <Tab label=\"Item Five\" />\r\n//   <Tab label=\"Item Six\" />\r\n//   <Tab label=\"Item Seven\" />\r\n// </Tabs> */}","import * as React from \"react\";\r\nexport const XDC = (props) => (\r\n    <svg\r\n        width={20}\r\n        height={20}\r\n        fill=\"none\"\r\n        version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n        viewBox=\"0 0 511.3 457.5\" xmlSpace=\"preserve\">\r\n        <path fill=\"#15294C\" d=\"M292.7,221.7L439.8,35.9h-86.9c-18,0.2-33.5,8.6-46.6,25.3l-73,92.7l-73-92.7c-13.3-16.9-28.9-25.3-46.6-25.3\r\n   H56.3c-9.8,0-14.7,4.1-14.7,12.3c0,4.1,1.9,8.4,5.6,13.1l126.6,160.4L94.5,322.9l-55,70.1c-3.7,4.8-5.6,9.1-5.6,13\r\n   c1.1,8,6,12,14.9,12h56.8c17.8,0,33.2-8.3,46.4-25l81.3-103.7L314.5,393c13.1,16.7,28.6,25,46.4,25H447L292.7,221.7z\"/>\r\n        <polygon fill=\"#9ACA3D\" points=\"319.9,222 396.2,318.9 396.2,125.1\" />\r\n    </svg>\r\n\r\n);\r\n\r\n","import { default as Arbitrum } from \"./Arbitrum\";\r\nimport { default as Avalanche } from \"./Avalanche\";\r\nimport { default as Ethereum } from \"./Ethereum\";\r\nimport { default as Hardhat } from \"./Hardhat\";\r\nimport { default as Optimism } from \"./Optimism\";\r\nimport { default as Polygon } from \"./Polygon\";\r\nimport { XDC } from \"./XDC\";\r\n\r\n// import XDCLogo from './Polygon'\r\n// const chainMetadataByName = {\r\n//     arbitrum: Arbitrum,\r\n//     arbitrumRinkeby: Arbitrum,\r\n//     avalanche: Avalanche,\r\n//     avalancheFuji: Avalanche,\r\n//     goerli: Ethereum,\r\n//     hardhat: Hardhat,\r\n//     kovan: Ethereum,\r\n//     localhost: Ethereum,\r\n//     mainnet: Ethereum,\r\n//     optimism: Optimism,\r\n//     optimismGoerli: Optimism,\r\n//     optimismKovan: Optimism,\r\n//     polygon: Polygon,\r\n//     polygonMumbai: Polygon,\r\n//     rinkeby: Ethereum,\r\n//     ropsten: Ethereum,\r\n//     sepolia: Ethereum,\r\n// };\r\n\r\n\r\nconst chainMetadataByName = {\r\n    0: Ethereum,\r\n    1: Ethereum,\r\n    5: Ethereum,\r\n    137: Polygon,\r\n    80001: Polygon,\r\n\r\n    1101: Polygon,\r\n    1442: Polygon,\r\n\r\n    50: XDC,\r\n    51: XDC,\r\n}\r\n\r\nexport default chainMetadataByName;","import React from 'react';\r\nimport { styled } from '@mui/system';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport Chip from '@mui/material/Chip';\r\n\r\n\r\nimport chainIconsMap from '../hooks/chainIcons'\r\nimport { Box, Typography } from '@mui/material';\r\n// import { useDynamicSVGImport } from '../hooks';\r\n\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport { useMinterLabStore } from '../hooks';\r\n\r\nimport { isChainTestnet, chainName } from \"../contracts\";\r\nimport { useAccount, useNetwork } from 'wagmi';\r\n\r\n// const Logo = chainIconsMap['polygon']\r\n\r\nconst StyledMenuItem = styled(MenuItem)(({ theme }) => ({\r\n    // '& .chip': {\r\n    //     marginRight: theme.spacing(4),\r\n    //     marginLeft: theme.spacing(4),\r\n    // },\r\n    // '& > div > *': {\r\n    //     marginRight: theme.spacing(2),\r\n    //     // marginLeft: theme.spacing(4),\r\n    // },\r\n\r\n    // margin: 8,\r\n    // '&:focus': {\r\n    //     backgroundColor: theme.palette.primary.main,\r\n    //     '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n    //         color: theme.palette.common.white,\r\n    //     },\r\n    // },\r\n}));\r\n\r\nconst StyledBox = styled(Box)(({ theme }) => ({\r\n    // '& .chip': {\r\n    //     marginRight: theme.spacing(4),\r\n    //     marginLeft: theme.spacing(4),\r\n    // },\r\n    '& >  *': {\r\n\r\n        // marginLeft: theme.spacing(4),\r\n        [theme.breakpoints.up('sm')]: {\r\n            // backgroundColor: theme.palette.primary.main,\r\n            marginRight: theme.spacing(1),\r\n        },\r\n    },\r\n\r\n\r\n    // margin: 8,\r\n    // '&:focus': {\r\n    //     backgroundColor: theme.palette.primary.main,\r\n    //     '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n    //         color: theme.palette.common.white,\r\n    //     },\r\n    // },\r\n}));\r\n\r\n// const Icon = ({ name, onCompleted, onError, ...rest }) => {\r\n//     const { error, loading, SvgIcon } = useDynamicSVGImport(name, {\r\n//         onCompleted,\r\n//         onError\r\n//     });\r\n//     if (error) {\r\n//         return error.message;\r\n//     }\r\n//     if (loading) {\r\n//         return \"Loading...\";\r\n//     }\r\n//     if (SvgIcon) {\r\n//         //   return \"what?\";\r\n//         return <SvgIcon {...rest} />;\r\n//     }\r\n//     return null;\r\n// };\r\n\r\n// 여기서 주스탄드에 있는 collection id 를 받아오게 해서 관리할 수도있음\r\nexport default function NFTSelect() {\r\n\r\n  \r\n\r\n    const contract1155Address = useMinterLabStore(state => state.contract1155Address)\r\n    console.log(contract1155Address);\r\n\r\n    const { chain } = useNetwork()\r\n    const chainId = chain?.id ?? 0\r\n    console.log(chainId);\r\n\r\n    const Logo = chainIconsMap[chainId]\r\n\r\n    const account = useAccount()\r\n\r\n\r\n\r\n    const matches = useMediaQuery((theme) => theme.breakpoints.up('sm'));\r\n\r\n\r\n    return (\r\n        <FormControl\r\n            variant=\"standard\"\r\n            style={{\r\n                // margin: 8,\r\n                // padding: 8,\r\n                minWidth: 120,\r\n                width: '100%',\r\n            }} >\r\n            <InputLabel id=\"nft-collection-select-label\">NFT Collection</InputLabel>\r\n            <Select\r\n                labelId=\"nft-collection-select-label\"\r\n                id=\"nft-collection-select\"\r\n                value={0}\r\n                // onChange={handleChange}\r\n                label=\"NFT Collection\"\r\n                sx={{ maxWidth: 683 }}\r\n\r\n            // disabled\r\n            >\r\n              \r\n\r\n                <StyledMenuItem key={0} value={0} >\r\n\r\n                    <StyledBox sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n\r\n                        {contract1155Address === \"0x0000000000000000000000000000000000000000\" ?\r\n                            <div>\r\n                                <Typography variant=\"body1\" display=\"inline\">\r\n                                    You have not created a NFT with address : {account.address} ,a collection will be created once you create your first 1155 NFT\r\n                                </Typography>\r\n                            </div>\r\n                            :\r\n                            <>\r\n\r\n                                <Logo />\r\n                                <Box >\r\n                                    <Typography variant=\"body1\" display=\"inline\">\r\n                                        {/* {chain.toUpperCase()} */}\r\n                                        {chainName[chainId]}\r\n                                    </Typography>\r\n                                </Box>\r\n\r\n                                <Chip className=\"chip\" label={isChainTestnet[chainId] ? \"testnet\" : \"mainnet\"} size={\"small\"} variant={'outlined'} color={isChainTestnet[chainId] ? \"primary\" : \"success\"} />\r\n\r\n\r\n                                {matches &&\r\n                                    <Box>\r\n                                        <Typography variant=\"caption\" display=\"inline\">\r\n                                            {contract1155Address}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                }\r\n                            </>\r\n                        }\r\n\r\n                    </StyledBox>\r\n                </StyledMenuItem>\r\n\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Toolbar from '@mui/material/Toolbar';\r\n\r\nimport SideNav from './SideNav';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\r\nimport CollectionSelect from './CollectionSelect1155';\r\n\r\nconst drawerWidth = 240;\r\n\r\n// const StateMap = {\r\n//   'CreateCollection': 0,\r\n//   'CreateNFT': 1,\r\n//   'ManageNFT': 2,\r\n//   'MintingPage': 3,\r\n//   'Settings': 4,\r\n//   '': 5,\r\n// }\r\n\r\nconst StateMap = {\r\n \r\n  'CreateNFT': 0,\r\n  'ManageNFT': 1,\r\n  'MintingPage':2,\r\n  'Settings': 3,\r\n  '': 4,\r\n}\r\n\r\n\r\nexport default function ResponsiveDrawer() {\r\n\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const location = useLocation()\r\n  // console.log(location)\r\n\r\n  let result = location.pathname.split('/');\r\n  // console.log(result);\r\n\r\n  // 현재 어떤 탭에 있는지 알려주는 state\r\n  const [value, setValue] = React.useState(StateMap[result[1]]);\r\n\r\n  const handleChange = (_, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  return (\r\n    <Box >\r\n      {/* <CssBaseline /> */}\r\n      {/* <Box> */}\r\n\r\n      <AppBar\r\n        // position=\"fixed\"\r\n        sx={{\r\n          width: { sm: `calc(100% - ${drawerWidth}px)` },\r\n          ml: { sm: `${drawerWidth}px` },\r\n        }}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            sx={{ mr: 2, display: { sm: 'none' } }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          {/* <Typography variant=\"h5\" noWrap component=\"div\" sx={{ flexGrow: 1 }}>\r\n            Minter Lab\r\n          </Typography> */}\r\n          <Box sx={{ flexGrow: 2 }} >\r\n\r\n            <CollectionSelect  />\r\n          </Box>\r\n          <Box sx={{ flexGrow: 1 }} >\r\n\r\n            \r\n          </Box>\r\n          <ConnectButton />\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* </Box> */}\r\n      <Box\r\n        component=\"nav\"\r\n        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}\r\n        aria-label=\"mailbox folders\"\r\n      >\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Drawer\r\n          // container={container}\r\n          variant=\"temporary\"\r\n          open={mobileOpen}\r\n          onClose={handleDrawerToggle}\r\n          ModalProps={{\r\n            keepMounted: true, // Better open performance on mobile.\r\n          }}\r\n          sx={{\r\n            display: { xs: 'block', sm: 'none' },\r\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n          }}\r\n        >\r\n          <SideNav value={value} handleChange={handleChange} />\r\n        </Drawer>\r\n        <Drawer\r\n          variant=\"permanent\"\r\n          sx={{\r\n            display: { xs: 'none', sm: 'block' },\r\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n          }}\r\n          open\r\n        >\r\n          <SideNav value={value} handleChange={handleChange} />\r\n        </Drawer>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\n\r\n\r\n","import { Box, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\n\r\nexport default function Loading(props) {\r\n\r\n    return (\r\n        <Box\r\n            component=\"main\"\r\n            sx={{ flexGrow: 1, justifyContent: 'center', alignItems: 'center', display: 'flex', height: '100vh'}}\r\n        >\r\n\r\n            <Container sx={{  justifyContent: 'center', alignItems: 'center', display: 'flex' }} >\r\n                <CircularProgress size={300} />\r\n            </Container>\r\n        </Box>\r\n    );\r\n}","import React from 'react'\r\nimport { Box } from '@mui/material'\r\nimport { useMinterLabStore } from '../hooks/useMinterLabStore'\r\nimport Loading from './Loading'\r\nimport { Container } from '@mui/system'\r\n\r\n// interface Props {\r\n//     children: React.ReactElement\r\n// }\r\n\r\nexport default function Home({ children }) {\r\n    const isLoading = useMinterLabStore(state => state.isLoading)\r\n\r\n\r\n    if (isLoading) {\r\n        return <Loading />\r\n    }\r\n\r\n    return (\r\n        <Box\r\n            component=\"main\"\r\n            sx={{ flexGrow: 1, marginTop: 8, width: { sm: `calc(100% - ${240}px)` } }}\r\n        >\r\n            <Container maxWidth=\"lg\">\r\n\r\n                {children}\r\n            </Container>\r\n        </Box>\r\n\r\n    )\r\n}","export function PleaseCreateContract() {\r\n    console.log(\"PleaseCreateContract page loaded\")\r\n\r\n    return (\r\n        <div>\r\n            <h1>PleaseCreateContract</h1>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport { styled } from '@mui/system';\r\nimport { Button, Fade, Grow, TextField } from '@mui/material';\r\nimport { useMinterLabStore } from '../hooks';\r\nimport { useNetwork, useSigner } from 'wagmi';\r\nimport axios from 'axios';\r\nimport { chainSymbol, contract1155ABI } from '../contracts';\r\nimport { ethers } from 'ethers';\r\n\r\nimport chainIconsMap from '../hooks/chainIcons'\r\n\r\nconst StyledNiftyGatewayCardContainer = styled(Card)(({ theme }) => ({\r\n    height: '415px',\r\n    // height: '445px',\r\n    width: '278px',\r\n    padding: '12px',\r\n\r\n\r\n}));\r\n\r\nconst StyledNiftyGatewayCard = styled(Card)(({ theme }) => ({\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100%\",\r\n}));\r\n\r\nconst StyledNiftyGatewayCardMediaContainer = styled(Card)(({ theme }) => ({\r\n    position: 'relative',\r\n    borderRadius: '12px 12px 0px 0px',\r\n    overflow: 'hidden',\r\n    textAlign: 'center',\r\n    paddingBottom: '100%',\r\n    height: '0px',\r\n    transform: 'translateZ(0px)'\r\n}));\r\n\r\nconst StyledCardMedia = styled(CardMedia)({\r\n    display: 'initial',\r\n    pointerEvents: 'none',\r\n    position: 'absolute',\r\n    top: '0px',\r\n    left: '0px',\r\n    // width: '100%',\r\n    // height: '100%',\r\n    width: '254px',\r\n    height: '254px',\r\n    objectFit: 'cover',\r\n    zIndex: '-1'\r\n});\r\n\r\nconst StyledCardUpdater = styled(Box)({\r\n    display: 'initial',\r\n    // pointerEvents: 'none',\r\n    position: 'absolute',\r\n    top: '0px',\r\n    left: '0px',\r\n    width: '254px',\r\n    height: '254px',\r\n    objectFit: 'cover',\r\n    zIndex: '-1'\r\n});\r\n\r\nconst StyledNiftyGatewayCardContentContainer = styled(Card)(({ theme }) => ({\r\n    position: 'relative',\r\n    // backgroundColor: 'white',\r\n    backgroundColor: \"#474d57\",\r\n    borderRadius: '0px 0px 12px 12px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    border: '1px solid rgb(252, 213, 53)',\r\n    flex: '1 1 0%',\r\n    padding: '12px'\r\n}));\r\n\r\n\r\n\r\n\r\n\r\nconst StyledName = styled(Typography)(({ theme }) => ({\r\n    margin: '0px 24px 4px 0px',\r\n    textDecoration: 'none',\r\n    overflow: 'hidden',\r\n    whiteSpace: 'nowrap',\r\n    textOverflow: 'ellipsis',\r\n    fontWeight: '700',\r\n    fontSize: '16px',\r\n    lineHeight: '1.5',\r\n    fontFamily: 'MessinaSans, sans-serif'\r\n\r\n}));\r\n\r\n\r\nconst StyledPrice = styled(Typography)(({ theme }) => ({\r\n    margin: '0px 0px 4px',\r\n    textDecoration: 'none',\r\n    fontWeight: '600',\r\n    fontSize: '14px',\r\n    fontFamily: 'MessinaSans, sans-serif',\r\n    lineHeight: '1.5'\r\n\r\n}));\r\n\r\nconst StyledFloorePrice = styled(Typography)(({ theme }) => ({\r\n    margin: '0px',\r\n    textDecoration: 'none',\r\n    // color: 'rgb(97, 97, 97)',\r\n    fontWeight: '600',\r\n    fontSize: '12px',\r\n    lineHeight: '1.5',\r\n    fontFamily: 'MessinaSans, sans-serif'\r\n\r\n}));\r\n\r\nconst StyledEditionsBox = styled(Box)(({ theme }) => ({\r\n\r\n    position: 'relative',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flex: '1 1 0%',\r\n    paddingTop: '8px',\r\n    marginTop: '8px',\r\n    borderTop: '1px solid rgb(238, 238, 238)'\r\n}));\r\n\r\n\r\nconst StyledEdition = styled(Box)(({ theme }) => ({\r\n\r\n    position: 'relative',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flex: '1 1 0%',\r\n    minHeight: 'initial'\r\n}));\r\n\r\nconst StyledEditionRow = styled(Box)(({ theme }) => ({\r\n\r\n    display: 'flex',\r\n    WebkitBoxPack: 'justify',\r\n    justifyContent: 'space-between',\r\n    WebkitBoxAlign: 'center',\r\n    alignItems: 'center',\r\n    flexWrap: 'nowrap',\r\n    gap: '32px'\r\n}));\r\n\r\nconst StyledEditionRowName = styled(Typography)(({ theme }) => ({\r\n\r\n    margin: '0px',\r\n    textDecoration: 'none',\r\n    // color: 'rgb(97, 97, 97)',\r\n    fontWeight: '400',\r\n    fontSize: '14px',\r\n    lineHeight: '1.5',\r\n    fontFamily: 'MessinaSans, sans-serif'\r\n\r\n\r\n\r\n}));\r\n\r\nconst StyledEditionRowValue = styled(Typography)(({ theme }) => ({\r\n\r\n\r\n    margin: '0px',\r\n    textDecoration: 'none',\r\n    textAlign: 'right',\r\n    textOverflow: 'ellipsis',\r\n    overflow: 'hidden',\r\n    whiteSpace: 'nowrap',\r\n    fontWeight: '400',\r\n    fontSize: '14px',\r\n    lineHeight: '1.5',\r\n    fontFamily: 'MessinaSans, sans-serif'\r\n\r\n\r\n}));\r\n\r\nconst StyledChainLogo = styled(Box)(({ theme }) => ({\r\n    position: 'absolute',\r\n    top: '12px',\r\n    right: '12px',\r\n\r\n}));\r\n\r\nconst StyledInputRow = styled(Box)(({ theme }) => ({\r\n    display: 'flex',\r\n    // WebkitBoxPack: 'justify',\r\n    // justifyContent: 'space-between',\r\n    // WebkitBoxAlign: 'center',\r\n    // alignItems: 'center',\r\n    // flexWrap: 'nowrap',\r\n    // gap: '32px',\r\n    // marginTop: '8px',\r\n    // marginBottom: '8px'\r\n    // height: '32px',\r\n    margin: \"12px\"\r\n}));\r\n\r\nconst NiftyGatewayCard = ({ tokenId, tokenURL, totalSupplyProp, priceProp, maxSupplyProp }) => {\r\n\r\n\r\n    const { chain } = useNetwork()\r\n    const [loading, setLoading] = useState(false);\r\n    const [nftImageCid, setNftImageCid] = useState(\"\");\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n\r\n\r\n    const { data: signer, isError, isLoading } = useSigner()\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const [totalSupply, setTotalSupply] = useState(totalSupplyProp);\r\n    const [price, setPrice] = useState(priceProp);\r\n    const [maxSupply, setMaxSupply] = useState(maxSupplyProp);\r\n\r\n    const contract1155Address = useMinterLabStore(state => state.contract1155Address)\r\n\r\n    const [checked, setChecked] = React.useState(false);\r\n\r\n    // const [inputPrice, setInputPrice] = useState(priceProp);\r\n    // const [inputMaxSupply, setInputMaxSupply] = useState(maxSupplyProp);\r\n\r\n    const priceRef = useRef();\r\n    const maxSupplyRef = useRef();\r\n\r\n    const handleChange = () => {\r\n        setChecked((prev) => !prev);\r\n    };\r\n\r\n\r\n\r\n\r\n    function handleMint() {\r\n        console.log(\"minting\");\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(\"test\");\r\n\r\n        async function fetchNFTData() {\r\n\r\n            try {\r\n\r\n                setLoading(true)\r\n\r\n                axios.get(tokenURL).then((res) => {\r\n                    console.log(res.data.image);\r\n                    setNftImageCid(res.data.image)\r\n                    setName(res.data.name)\r\n                    setDescription(res.data.description)\r\n                    setLoading(false)\r\n                })\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n\r\n            } finally {\r\n                // setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchNFTData()\r\n    }, []);\r\n\r\n\r\n    async function updateMaxSupply() {\r\n\r\n        const maxSupply = maxSupplyRef.current.value ?? \"0\";\r\n        try {\r\n\r\n            const contract = new ethers.Contract(contract1155Address, contract1155ABI, signer);\r\n            const contractWithSigner = contract.connect(signer)\r\n\r\n            // console.log(account.address);\r\n\r\n            const tx = await contractWithSigner.setMaxSupply(maxSupply, tokenId)\r\n            const rc = await tx.wait()\r\n\r\n            console.log(tx);\r\n            console.log(rc);\r\n\r\n            setMaxSupply(maxSupply)\r\n        } catch (error) {\r\n            console.error(error);\r\n            // alert(error.message)\r\n\r\n        } finally {\r\n\r\n        }\r\n    }\r\n\r\n    async function updatePrice() {\r\n        const price = priceRef.current.value ?? \"0\";\r\n        try {\r\n\r\n            const contract = new ethers.Contract(contract1155Address, contract1155ABI, signer);\r\n            const contractWithSigner = contract.connect(signer)\r\n\r\n            // console.log(account.address);\r\n\r\n            // const tx = await contractWithSigner.getValues(0,100)\r\n            // console.log(tx)\r\n            // console.log(tx[0].toNumber())\r\n\r\n            const tx = await contractWithSigner.setPrice(ethers.utils.parseUnits(`${price}`, 18), tokenId)\r\n            const rc = await tx.wait()\r\n\r\n            console.log(tx);\r\n            console.log(rc);\r\n\r\n            setPrice(price)\r\n        } catch (error) {\r\n            console.error(error);\r\n            // alert(error.message)\r\n\r\n        } finally {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    const Logo = chainIconsMap[chain.id]\r\n\r\n\r\n    function priceFormatter(price) {\r\n        const priceMultipliedByCoinPrice = price * 0.03184;\r\n    \r\n        const priceFixed = priceMultipliedByCoinPrice.toFixed(9);\r\n \r\n        return priceFixed\r\n    }\r\n\r\n    return (\r\n        <StyledNiftyGatewayCardContainer>\r\n            {\r\n                checked ?\r\n                    (\r\n                        <StyledNiftyGatewayCard>\r\n                            <StyledNiftyGatewayCardMediaContainer>\r\n                                <StyledCardUpdater>\r\n                                    <div>\r\n                                        <StyledInputRow>\r\n                                            <TextField size=\"small\" label=\"Price\" variant=\"filled\" inputRef={priceRef} defaultValue={price}  />\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                variant=\"contained\" color=\"primary\" onClick={updatePrice}>\r\n\r\n                                                Update\r\n                                            </Button>\r\n                                        </StyledInputRow>\r\n\r\n                                        <StyledInputRow>\r\n                                            <TextField size=\"small\" label=\"Max Supply\" variant=\"filled\" inputRef={maxSupplyRef} defaultValue={maxSupply}  />\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                variant=\"contained\" color=\"primary\" onClick={updateMaxSupply}>\r\n\r\n                                                Update\r\n                                            </Button>\r\n                                        </StyledInputRow>\r\n\r\n                                    </div>\r\n                                </StyledCardUpdater>\r\n                            </StyledNiftyGatewayCardMediaContainer>\r\n                            <StyledNiftyGatewayCardContentContainer>\r\n                                <StyledChainLogo>\r\n                                    <Logo />\r\n                                </StyledChainLogo>\r\n                                <StyledName component=\"p\">\r\n                                    {name}\r\n                                </StyledName>\r\n                                <StyledPrice component=\"p\">\r\n                                    <span>${priceFormatter(price)}</span>\r\n                                    &nbsp;\r\n                                    <StyledFloorePrice component=\"span\">\r\n                                        = {price} {chainSymbol[chain.id]}\r\n                                    </StyledFloorePrice>\r\n                                </StyledPrice>\r\n                                <StyledEditionsBox>\r\n                                    <StyledEdition>\r\n                                        <StyledEditionRow>\r\n                                            <StyledEditionRowName component=\"p\">\r\n                                                Editions\r\n                                            </StyledEditionRowName>\r\n                                            <StyledEditionRowValue component=\"p\">\r\n                                                {totalSupply}/{maxSupply}\r\n                                            </StyledEditionRowValue>\r\n                                        </StyledEditionRow>\r\n                                        <Button\r\n                                            sx={{\r\n                                                height: '24px',\r\n                                            }}\r\n                                            fullWidth size='small' variant='contained'\r\n                                            onClick={handleChange}\r\n                                        >\r\n                                            BACK\r\n                                        </Button>\r\n                                    </StyledEdition>\r\n                                </StyledEditionsBox>\r\n                            </StyledNiftyGatewayCardContentContainer>\r\n                        </StyledNiftyGatewayCard >\r\n                    ) : (\r\n\r\n                        <StyledNiftyGatewayCard>\r\n                            <StyledNiftyGatewayCardMediaContainer>\r\n                                <StyledCardMedia component=\"img\" height=\"200\" image={nftImageCid} alt={name} />\r\n                            </StyledNiftyGatewayCardMediaContainer>\r\n                            <StyledNiftyGatewayCardContentContainer>\r\n                                <StyledChainLogo>\r\n                                    <Logo />\r\n                                </StyledChainLogo>\r\n                                <StyledName component=\"p\">\r\n                                    {name}\r\n                                </StyledName>\r\n                                <StyledPrice component=\"p\">\r\n                                    <span>${priceFormatter(price)}</span>\r\n                                    &nbsp;\r\n                                    <StyledFloorePrice component=\"span\">\r\n                                        = {price} {chainSymbol[chain.id]}\r\n                                    </StyledFloorePrice>\r\n                                </StyledPrice>\r\n                                <StyledEditionsBox>\r\n                                    <StyledEdition>\r\n                                        <StyledEditionRow>\r\n                                            <StyledEditionRowName component=\"p\">\r\n                                                Editions\r\n                                            </StyledEditionRowName>\r\n                                            <StyledEditionRowValue component=\"p\">\r\n                                                {totalSupply}/{maxSupply}\r\n                                            </StyledEditionRowValue>\r\n                                        </StyledEditionRow>\r\n                                        <Button\r\n                                            sx={{\r\n                                                height: '24px',\r\n                                            }}\r\n                                            fullWidth size='small' variant='contained'\r\n                                            onClick={handleChange}\r\n                                        >\r\n                                            EDIT\r\n                                        </Button>\r\n                                    </StyledEdition>\r\n                                </StyledEditionsBox>\r\n                            </StyledNiftyGatewayCardContentContainer>\r\n                        </StyledNiftyGatewayCard >\r\n                    )\r\n\r\n            }\r\n\r\n        </StyledNiftyGatewayCardContainer >\r\n    );\r\n};\r\n\r\n// const UnmanageableCard = ({ nft }) => {\r\n//     const { title, description, imageUrl, creator, price } = nft;\r\n\r\n\r\n\r\n\r\nexport default NiftyGatewayCard;","import { useEffect, useLayoutEffect, useState } from 'react';\r\nimport { useMinterLabStore } from '../hooks';\r\nimport { ethers } from 'ethers';\r\nimport { useAccount, useProvider, useSigner } from 'wagmi';\r\nimport axios from 'axios';\r\n\r\n\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport { contract1155ABI } from '../contracts'\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia,\r\n    Skeleton,\r\n    Switch,\r\n    Typography,\r\n    Grow,\r\n    TextField,\r\n} from '@mui/material';\r\n\r\nimport { PleaseCreateContract } from '../components/PleaseCreateContract';\r\n\r\nimport ManageableNFTCard from '../components/ManageableNFTCard';\r\n\r\n\r\nconst ListContainer = styled(Box)`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  margin: 20px 0;\r\n`;\r\n\r\n\r\nconst StyledCard = styled(Card)`\r\n// display: flex;\r\n// flex-direction: column;\r\n// align-items: center;\r\n// justify-content: center;\r\nwidth: 320px;\r\nheight: 464px;\r\n// border: 1px solid #ccc;\r\nborder-radius: 10px;\r\n&:hover {\r\n    // border: 1px solid #DAEE01;\r\n    box-shadow: 0px 0px 10px #DAEE01;\r\n\r\n}\r\n// overflow: hidden;\r\noverflow: 'hidden';\r\nmargin: 20px;\r\n`\r\n\r\nexport function ManageNFT() {\r\n    const isContractCreatedWithAccount = useMinterLabStore(state => state.isContractCreatedWithAccount)\r\n\r\n    return (\r\n        <div>\r\n\r\n            {\r\n                isContractCreatedWithAccount ? <ManageNFTWhenContractExist /> : <PleaseCreateContract />\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction ManageNFTWhenContractExist() {\r\n\r\n    const { data: signer, isError, isLoading } = useSigner()\r\n\r\n\r\n\r\n\r\n    // const [contract1155Address, setContract1155Address] = useState(null)\r\n\r\n    // const contract1155Address = \"0xBe29265464064d382724bB4801Dd87528CbB349B\"\r\n    const contract1155Address = useMinterLabStore(state => state.contract1155Address)\r\n    const provider = useProvider()\r\n\r\n    const [nftInfoList, setNftInfoList] = useState([])\r\n\r\n    useLayoutEffect(() => {\r\n        // async function FetchAllNFTInfo() {\r\n        //     console.log(\"?????????????????????\")\r\n        //     try {\r\n        //         const contract = new ethers.Contract(contract1155Address, contract1155ABI, provider);\r\n        //         const contractWithSigner = contract.connect(signer);\r\n        //         // const tx1155 = await contractWithSigner.get(account.address,\"0\", \"1\")\r\n\r\n        //         const tx1155 = await contractWithSigner.IDs();\r\n        //         // const tx1155 = await contractWithSigner.setNewSale(0, ethers.utils.parseUnits(\"0.1\", 18), 99,\"https://bafkreiettzzj252n22wriwzj55ojjukyvuenk74gejhff5u5n6t5tggmu4.ipfs.nftstorage.link\")\r\n\r\n        //         console.log(tx1155);\r\n        //         console.log(\"wth\")\r\n        //         const IDs = await tx1155.toNumber();\r\n\r\n\r\n        //         const NFTList = []\r\n\r\n        //         for (let i = 0; i < IDs; i++) {\r\n        //             const totalSupply = await contractWithSigner.totalSupply(i);\r\n        //             const maxSupply = await contractWithSigner.maxSupply(i);\r\n        //             const price = await contractWithSigner.price(i);\r\n        //             const tokenURL = await contractWithSigner.tokenURL(i);\r\n\r\n        //             const NFTObj = {\r\n        //                 id: i,\r\n        //                 totalSupply: totalSupply.toNumber(),\r\n        //                 maxSupply: maxSupply.toNumber(),\r\n        //                 price: ethers.utils.formatUnits(price, 18),\r\n        //                 tokenURL: tokenURL\r\n        //             }\r\n\r\n        //             NFTList.push(NFTObj)\r\n        //         }\r\n\r\n        //         console.log(NFTList);\r\n\r\n        //         setNftInfoList(NFTList)\r\n        //     } catch (error) {\r\n        //         console.log(error)\r\n        //     } finally {\r\n\r\n        //     }\r\n        // }\r\n\r\n\r\n\r\n        async function FetchAllNFTInfo() {\r\n            try {\r\n                console.log(\"wtf ffffffffffffff\")\r\n                console.log(contract1155Address)\r\n                const contract1155 = new ethers.Contract(`${contract1155Address}`, contract1155ABI, provider);\r\n\r\n\r\n\r\n\r\n                const tx1155 = await contract1155.getValues(0, 100)\r\n                console.log(tx1155)\r\n\r\n\r\n                console.log(tx1155[0].toNumber())\r\n                const tmpArray = []\r\n                for (let index = 0; index < tx1155[0].toNumber(); index++) {\r\n                    const maxSupply = tx1155[1][index];\r\n                    const totalSupply = tx1155[2][index];\r\n                    const price = tx1155[3][index];\r\n                    const tokenURL = tx1155[4][index];\r\n\r\n\r\n\r\n                    const NFTObj = {\r\n                        id: index,\r\n                        totalSupply: totalSupply.toNumber(),\r\n                        maxSupply: maxSupply.toNumber(),\r\n                        price: ethers.utils.formatUnits(price, 18),\r\n                        tokenURL: tokenURL\r\n                    }\r\n\r\n                    tmpArray.push(NFTObj)\r\n                }\r\n\r\n\r\n                setNftInfoList(tmpArray)\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n                // alert(error.message)\r\n                alert(\"connect Wallet first\")\r\n\r\n            } finally {\r\n                // setIsLoading(false)\r\n            }\r\n        }\r\n\r\n\r\n        FetchAllNFTInfo()\r\n    }, [provider, contract1155Address])\r\n\r\n\r\n    // async function FetchAllNFTInfo() {\r\n    //     console.log(\"?????????????????????\")\r\n    //     try {\r\n    //         const contract = new ethers.Contract(contract1155Address, contract1155ABI, provider);\r\n    //         const contractWithSigner = contract.connect(signer);\r\n    //         // const tx1155 = await contractWithSigner.get(account.address,\"0\", \"1\")\r\n\r\n    //         const tx1155 = await contractWithSigner.IDs();\r\n    //         // const tx1155 = await contractWithSigner.setNewSale(0, ethers.utils.parseUnits(\"0.1\", 18), 99,\"https://bafkreiettzzj252n22wriwzj55ojjukyvuenk74gejhff5u5n6t5tggmu4.ipfs.nftstorage.link\")\r\n\r\n    //         console.log(tx1155);\r\n    //         console.log(\"wth\")\r\n    //         const IDs = await tx1155.toNumber();\r\n\r\n\r\n    //         const NFTList = []\r\n\r\n    //         for (let i = 0; i < IDs; i++) {\r\n    //             const totalSupply = await contractWithSigner.totalSupply(i);\r\n    //             const maxSupply = await contractWithSigner.maxSupply(i);\r\n    //             const price = await contractWithSigner.price(i);\r\n    //             const tokenURL = await contractWithSigner.tokenURL(i);\r\n\r\n    //             const NFTObj = {\r\n    //                 id: i,\r\n    //                 totalSupply: totalSupply.toNumber(),\r\n    //                 maxSupply: maxSupply.toNumber(),\r\n    //                 price: ethers.utils.formatUnits(price, 18),\r\n    //                 tokenURL: tokenURL\r\n    //             }\r\n\r\n    //             NFTList.push(NFTObj)\r\n    //         }\r\n\r\n    //         console.log(NFTList);\r\n\r\n    //         setNftInfoList(NFTList)\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     } finally {\r\n\r\n    //     }\r\n    // }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                    padding: \"20px 20px\",\r\n                }}\r\n            >\r\n                {/* <button onClick={FetchAllNFTInfo}>\r\n                    Refresh\r\n                </button> */}\r\n                <h1>Manage NFT</h1>\r\n                <h2>{contract1155Address}</h2>\r\n\r\n\r\n            </div>\r\n            {contract1155Address !== null ? <NFTInfoCardList nftInfoList={nftInfoList} /> : <h1>Create Your First NFT </h1>}\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nfunction NFTInfoCardList({ nftInfoList }) {\r\n    console.log(nftInfoList);\r\n\r\n    return (\r\n        <ListContainer >\r\n\r\n            {nftInfoList.map(({ tokenURL, price, maxSupply, totalSupply }, index) => {\r\n                return (\r\n                    <ManageableNFTCard key={index} tokenId={index} tokenURL={tokenURL} priceProp={price} maxSupplyProp={maxSupply} totalSupplyProp={totalSupply} />\r\n                )\r\n            })}\r\n        </ListContainer>\r\n\r\n    )\r\n}\r\n\r\n\r\n// data fetch from contract.getTokenURLbyIndex(number)\r\nfunction NFTInfoCard({ tokenId, tokenURL, totalSupplyProp, priceProp, maxSupplyProp }) {\r\n    const [loading, setLoading] = useState(false);\r\n    const [nftImageCid, setNftImageCid] = useState(\"\");\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n\r\n\r\n    const { data: signer, isError, isLoading } = useSigner()\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const [totalSupply, setTotalSupply] = useState(totalSupplyProp);\r\n    const [price, setPrice] = useState(priceProp);\r\n    const [maxSupply, setMaxSupply] = useState(maxSupplyProp);\r\n\r\n    const contract1155Address = useMinterLabStore(state => state.contract1155Address)\r\n\r\n\r\n\r\n    // console.log(\"NFTAbi\", NFTAbi)\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(\"test\");\r\n\r\n        async function fetchNFTData() {\r\n\r\n            try {\r\n\r\n                setLoading(true)\r\n\r\n                axios.get(tokenURL).then((res) => {\r\n                    console.log(res.data.image);\r\n                    setNftImageCid(res.data.image)\r\n                    setName(res.data.name)\r\n                    setDescription(res.data.description)\r\n                    setLoading(false)\r\n                })\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n\r\n            } finally {\r\n                // setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchNFTData()\r\n    }, []);\r\n\r\n\r\n    async function mint() {\r\n        // try {\r\n\r\n\r\n\r\n        //     const contract = new ethers.Contract(tmp1155ContractAddress, Mumbai1155ContractABI, signer);\r\n        //     const contractWithSigner = contract.connect(signer)\r\n\r\n        //     console.log(account.address);\r\n\r\n        //     const tx = await contractWithSigner.mintSingle(account.address, 1, 1)\r\n        //     const rc = await tx.wait()\r\n\r\n        //     console.log(tx);\r\n        //     console.log(rc);\r\n\r\n        //     // console.log(\"1155 Contract Address : \",rc.logs[0].address);\r\n        // } catch (error) {\r\n        //     console.error(error);\r\n        //     // alert(error.message)\r\n        //     alert(\"connect Wallet first\")\r\n\r\n        // } finally {\r\n        //     // setIsLoading(false)\r\n        // }\r\n    }\r\n\r\n    async function updatePrice() {\r\n        console.log(\"updatePrice\", price);\r\n        try {\r\n\r\n            const contract = new ethers.Contract(contract1155Address, contract1155ABI, signer);\r\n            const contractWithSigner = contract.connect(signer)\r\n\r\n            // console.log(account.address);\r\n\r\n            // const tx = await contractWithSigner.getValues(0,100)\r\n            // console.log(tx)\r\n            // console.log(tx[0].toNumber())\r\n\r\n            const tx = await contractWithSigner.setPrice(ethers.utils.parseUnits(`${price}`, 18), tokenId)\r\n            const rc = await tx.wait()\r\n\r\n            console.log(tx);\r\n            console.log(rc);\r\n\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n            // alert(error.message)\r\n\r\n        } finally {\r\n\r\n        }\r\n    }\r\n\r\n    async function updateMaxSupply() {\r\n        try {\r\n\r\n            const contract = new ethers.Contract(contract1155Address, contract1155ABI, signer);\r\n            const contractWithSigner = contract.connect(signer)\r\n\r\n            // console.log(account.address);\r\n\r\n            const tx = await contractWithSigner.setMaxSupply(maxSupply, tokenId)\r\n            const rc = await tx.wait()\r\n\r\n            console.log(tx);\r\n            console.log(rc);\r\n\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n            // alert(error.message)\r\n\r\n        } finally {\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        loading ? <Skeleton variant=\"rectangular\" width={345} height={360} /> :\r\n\r\n\r\n            <StyledCard sx={{ maxWidth: 345, height: 1040, backgroundColor: \"#212121\", }}>\r\n                <CardMedia\r\n                    component=\"img\"\r\n                    alt=\"green iguana\"\r\n                    height=\"320\"\r\n                    // image={nftImageCid}\r\n                    image={nftImageCid}\r\n                />\r\n                <CardContent sx={{ height: 133 }}>\r\n\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {name}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {description}\r\n                    </Typography>\r\n\r\n                </CardContent>\r\n                <CardContent sx={{ height: 233 }}>\r\n\r\n                    <div>\r\n\r\n                        <TextField id=\"outlined-basic\" label=\"Price\" variant=\"outlined\" value={price} onChange={(e) => setPrice(e.target.value)} />\r\n                        <TextField id=\"outlined-basic\" label=\"Total Supply\" variant=\"outlined\" value={totalSupply} disabled />\r\n                        <TextField id=\"outlined-basic\" label=\"Max Supply\" variant=\"outlined\" value={maxSupply} onChange={(e) => setMaxSupply(e.target.value)} />\r\n                    </div>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button size=\"small\" onClick={updatePrice}>Set Price</Button>\r\n                    <Button size=\"small\" onClick={updateMaxSupply}>Set maxSupply</Button>\r\n\r\n                </CardActions>\r\n            </StyledCard>\r\n\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport { NFTStorage, Blob } from \"nft.storage\";\r\n\r\n// 공유 계정 , minterlab , nft storage 공유 계졍 \r\n// const API_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweEJiNDRBZDUzODJEYjNiRDI5NzM2NkFDY2M4OTNBN0YxNGNjYkVDNjgiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY3NDAzNzQ1MTcyMiwibmFtZSI6Im1pbnRlci1sYWIifQ.0VBCGCisVmuydkVgTSFc1RFkkh8gkyQJMKAye5VvOYw\";\r\nconst API_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDEzYUUyRmYxRTViZTYyMEIyMjFmNzA3YjI5MzY5OEYzMTA0REIyNmYiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY3MzIzMzE3MjMxNiwibmFtZSI6InRlc3QifQ.W-z5b0Yl1JzwvX9xwKv4EOdfUKN8bzPGDbij4m7x4R8\"\r\n\r\nconst client = new NFTStorage({ token: API_KEY });\r\n\r\n// export async function ipfsUploadImage(files) {\r\n\r\n//   console.log(files)\r\n\r\n\r\n//   //   const directoryPath = dirName;\r\n//   //   const filesToUpload = filesFromPath(directoryPath, {\r\n//   //     pathPrefix: path.resolve(directoryPath), // see the note about pathPrefix below\r\n//   //     hidden: true, // use the default of false if you want to ignore files that start with '.'\r\n//   //   })\r\n\r\n//   // 이것도 그냥 , store 로 하면 뒤에 파일명 안 붙는거 아닌가 ???\r\n//   const cid = await client.storeDirectory(files)\r\n//   console.log({ cid })\r\n\r\n//   const status = await client.status(cid)\r\n//   console.log(status)\r\n//   return status.cid;\r\n// }\r\n\r\n\r\n\r\nexport async function ipfsUploadImage(files) {\r\n\r\n  // console.log(files)\r\n\r\n  // const cid = await client.storeDirectory(files)\r\n  // console.log({ cid })\r\n\r\n  // const arrayBuffer = reader.result;\r\n  const blob = new Blob([files[0]]);\r\n\r\n  const cid = await client.storeBlob(blob)\r\n  console.log(cid)\r\n\r\n  const status = await client.status(cid)\r\n  console.log(status)\r\n  return status.cid;\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport async function ipfsUploadMetadata(metadata) {\r\n\r\n  console.log(metadata);\r\n\r\n\r\n  // const content = new Blob(Buffer.from(metadata));\r\n\r\n\r\n  const blob = new Blob([JSON.stringify(metadata)], { type: 'text/json' });\r\n  const cid = await client.storeBlob(blob);\r\n  console.log(cid);\r\n\r\n\r\n  // const content = new Blob(JSON.stringify(metadata));\r\n  // const cid = await client.store(metadata);\r\n  // console.log(cid);\r\n\r\n  const status = await client.status(cid)\r\n  console.log(status)\r\n  return status.cid;\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\n// import \"./basic.css\"\r\n\r\n// import { styled } from '@mui/system';\r\n// import { TextField, Button } from '@material-ui/core';\r\nimport { TextField, Button } from '@mui/material'\r\nimport { useNetwork, useSigner } from \"wagmi\";\r\nimport { ethers } from \"ethers\";\r\nimport { ipfsUploadImage, ipfsUploadMetadata } from '../utils/ipfsUpload';\r\nimport { useMinterLabStore } from '../hooks';\r\nimport { contract1155ABI, manager1155ABI, manager1155AddressByChainId } from '../contracts';\r\nimport { Box } from '@mui/system';\r\n\r\nimport { styled } from '@mui/system';\r\n\r\nconst thumbsContainer = {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    marginTop: 16\r\n};\r\n\r\nconst thumb = {\r\n    display: 'inline-flex',\r\n    borderRadius: 2,\r\n    border: '1px solid #eaeaea',\r\n    marginBottom: 8,\r\n    marginRight: 8,\r\n    width: 500,\r\n    height: 500,\r\n    padding: 4,\r\n    boxSizing: 'border-box'\r\n};\r\n\r\nconst thumbInner = {\r\n    display: 'flex',\r\n    minWidth: 0,\r\n    overflow: 'hidden'\r\n};\r\n\r\nconst img = {\r\n    display: 'block',\r\n    width: 'auto',\r\n    height: '100%'\r\n};\r\n\r\nconst test = {\r\n    // width: '500px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '20px',\r\n    borderWidth: '2px',\r\n    borderRadius: '2px',\r\n    borderColor: '#eeeeee',\r\n    borderStyle: 'dashed',\r\n    backgroundColor: '#fafafa',\r\n    color: '#bdbdbd',\r\n    outline: 'none',\r\n    transition: 'border .24s ease-in-out'\r\n};\r\n\r\n\r\nconst getColor = (props) => {\r\n    if (props.isDragAccept) {\r\n        return '#00e676';\r\n    }\r\n    if (props.isDragReject) {\r\n        return '#ff1744';\r\n    }\r\n    if (props.isFocused) {\r\n        return '#2196f3';\r\n    }\r\n    return '#eeeeee';\r\n}\r\n\r\n// const Container = styledComp.div`\r\n//     flex: 1;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     align-items: center;\r\n//     padding: 20px;\r\n//     border-width: 2px;\r\n//     border-radius: 2px;\r\n//     border-color: ${props => getColor(props)};\r\n//     border-style: dashed;\r\n//     background-color: #fafafa;\r\n//     color: #bdbdbd;\r\n//     outline: none;\r\n//     transition: border .24s ease-in-out;\r\n//     height: 30vh;\r\n//   `;\r\n\r\n\r\nconst Container = styled(Box)`\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 20px;\r\n    border-width: 2px;\r\n    border-radius: 2px;\r\n    border-color: ${props => getColor(props)};\r\n    border-style: dashed;\r\n    background-color: #fafafa;\r\n    color: #bdbdbd;\r\n    outline: none;\r\n    transition: border .24s ease-in-out;\r\n    height: 30vh;\r\n  `;\r\n\r\n\r\n// const StyledBox = styled(Box)(({ theme }) => ({\r\n\r\n//     '&   *': {\r\n\r\n//         margin: theme.spacing(1),\r\n\r\n//     },\r\n\r\n// }));\r\n\r\nconst StyledBox = styled(Box)((props) => {\r\n\r\n    console.log(\"styled props\", props);\r\n    return {\r\n        '&   *': {\r\n\r\n            margin: props.theme.spacing(1),\r\n\r\n        }\r\n    }\r\n\r\n}\r\n);\r\n\r\n\r\n\r\nconst StyledInputRow = styled(Box)(({ theme }) => ({\r\n    display: 'flex',\r\n    // WebkitBoxPack: 'justify',\r\n    // justifyContent: 'space-between',\r\n    // WebkitBoxAlign: 'center',\r\n    // alignItems: 'center',\r\n    // flexWrap: 'nowrap',\r\n    // gap: '32px',\r\n    // marginTop: '8px',\r\n    // marginBottom: '8px'\r\n    // height: '32px',\r\n    margin: \"12px\"\r\n}));\r\n\r\n\r\nexport function CreateNFT() {\r\n    const isContractCreatedWithAccount = useMinterLabStore(state => state.isContractCreatedWithAccount);\r\n    console.log(\"isContractCreatedWithAccount\", isContractCreatedWithAccount);\r\n\r\n    return (\r\n        <>\r\n            {isContractCreatedWithAccount ? <CreateNFTWhenContractExist /> : <CreateNFTWhenContractNotExist />}\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport function CreateNFTWhenContractNotExist() {\r\n    const { chain } = useNetwork()\r\n    const { data: signer, isError, isLoading } = useSigner();\r\n\r\n    async function DeploySmartContract() {\r\n        console.log(\"DeploySmartContract\");\r\n\r\n        console.log(\"contract deploy\")\r\n        const manager1155 = new ethers.Contract(manager1155AddressByChainId[chain.id], manager1155ABI, signer);\r\n\r\n        const contractWithSigner = manager1155.connect(signer)\r\n\r\n        const tx = await contractWithSigner.deployNFTContract()\r\n        const rc = await tx.wait()\r\n\r\n        console.log(tx);\r\n        console.log(rc);\r\n\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Please Deploy your Smart Contract</h1>\r\n            <Button onClick={DeploySmartContract} variant='outlined'>\r\n                Deploy Smart Contract\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport function CreateNFTWhenContractExist() {\r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const [files, setFiles] = useState([]);\r\n    const setIsLoading = useMinterLabStore(state => state.setIsLoading);\r\n    const contract1155Address = useMinterLabStore(state => state.contract1155Address);\r\n    const isContractCreatedWithAccount = useMinterLabStore(state => state.isContractCreatedWithAccount);\r\n    // const selectedCollection = useMinterLabStore(state => state.selectedCollection);\r\n\r\n    const [price, setPrice] = useState(0);\r\n    const [maxSupply, setMaxSupply] = useState(0);\r\n\r\n    \r\n    const { data: signer, isError, isLoading } = useSigner();\r\n    const { getRootProps,\r\n        getInputProps,\r\n        isFocused,\r\n        isDragAccept,\r\n        isDragReject } = useDropzone({\r\n            maxFiles: 1,\r\n            accept: {\r\n                'image/*': []\r\n            },\r\n            onDrop: acceptedFiles => {\r\n                setFiles(acceptedFiles.map(file => Object.assign(file, {\r\n                    preview: URL.createObjectURL(file)\r\n                })));\r\n                console.log(acceptedFiles);\r\n                console.log(acceptedFiles[0]);\r\n                // IPFS upload\r\n                // and get CID\r\n                // setImageCID(CID);\r\n            }\r\n        });\r\n\r\n    const thumbs = files.map(file => (\r\n        <div style={thumb} key={file.name}>\r\n            <div style={thumbInner}>\r\n                <img\r\n                    alt='hello'\r\n                    src={file.preview}\r\n                    style={img}\r\n                    // Revoke data uri after image is loaded\r\n                    onLoad={() => { URL.revokeObjectURL(file.preview) }}\r\n                />\r\n            </div>\r\n        </div>\r\n    ));\r\n\r\n    useEffect(() => {\r\n        // Make sure to revoke the data uris to avoid memory leaks, will run on unmount\r\n        return () => files.forEach(file => URL.revokeObjectURL(file.preview));\r\n    }, [files]);\r\n\r\n\r\n\r\n    const handleNameChange = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const handleDescriptionChange = (e) => {\r\n        setDescription(e.target.value);\r\n    }\r\n\r\n    const handlePriceChange = (e) => {\r\n        setPrice(e.target.value);\r\n    }\r\n\r\n    const handleMaxSupplyChange = (e) => {\r\n        setMaxSupply(e.target.value);\r\n    }\r\n\r\n    const handleIpfs = async (event) => {\r\n        event.preventDefault();\r\n\r\n        setIsLoading(true);\r\n\r\n        if (files.length === 1 && name !== '' && description !== '') {\r\n            console.log(files);\r\n            const cid = await ipfsUploadImage(files);\r\n            // setImageCID(cid + \"/\" + files[0].name);\r\n\r\n            //`https://ipfs.io/ipfs/${imageCID}`\r\n\r\n            const imageCID = `${cid}`\r\n\r\n            // const image = `https://ipfs.io/ipfs/${imageCID}`;\r\n            const image = `https://${imageCID}.ipfs.nftstorage.link`;\r\n            // const image = `https://${imageCID}`; \r\n            console.log(image);\r\n            // code to handle NFT metadata submission goes here\r\n            const metadataForUpload = {\r\n                name: name,\r\n                description: description,\r\n                image,\r\n            }\r\n            const tokenURI = await ipfsUploadMetadata(metadataForUpload);\r\n            const tokenURL = `https://${tokenURI}.ipfs.nftstorage.link`;\r\n            // console.log(\"NFT IPFS upload is completed, NFT is stored at : \", `https://ipfs.io/ipfs/${tokenURI}`);\r\n            console.log(\"NFT IPFS upload is completed, NFT is stored at : \", tokenURL);\r\n\r\n\r\n\r\n\r\n            if (signer === undefined) {\r\n                alert(\"Please connect your wallet\");\r\n                return;\r\n            }\r\n\r\n            // const { chain } = getNetwork()\r\n\r\n            let tempState = \"Name : \" + name + \"\\n\" +\r\n                \"Would you mint the NFT?\";\r\n            // let tempConfirm = window.confirm(tempState);\r\n            let tempConfirm = true;\r\n\r\n            if (tempConfirm) {\r\n\r\n                //  \r\n                try {\r\n\r\n                    // 요부분을 수정\r\n\r\n\r\n                    // 걍 getter 로 가져올수 있나 , 현재 ids 를?\r\n                    // 만약 IDs 를 가져왔는데 0 이면 , contract deploy 하게함 \r\n                    // const IDs = await contractWithSigner.IDs()\r\n                    // console.log(\"IDs\", IDs)\r\n                    if (!isContractCreatedWithAccount) {\r\n                        // contract deploy\r\n\r\n\r\n                    } else {\r\n                        // set new sale.\r\n\r\n                        const contract = new ethers.Contract(contract1155Address, contract1155ABI, signer);\r\n                        console.log(contract);\r\n                        const contractWithSigner = contract.connect(signer)\r\n\r\n                        // const tx1155 = await contractWithSigner.getValues(0, 100)\r\n                        // console.log(tx1155)\r\n                        // const newTokenId = tx1155[0].toNumber() + 1\r\n                        const tx1155 = await contractWithSigner.IDs();\r\n                        const IDs = tx1155.toNumber();\r\n\r\n                        // const tx = await contractWithSigner.mintSingle(tokenURL)\r\n                        const tx = await contractWithSigner.setNewSale(IDs, ethers.utils.parseUnits(price, 18), +maxSupply, tokenURL)\r\n\r\n                        const rc = await tx.wait()\r\n\r\n\r\n                        // alert(\"Your NFT is successfully minted!\");\r\n\r\n                        console.log(tx);\r\n\r\n                        console.log(rc);\r\n                    }\r\n\r\n\r\n                } catch (error) {\r\n                    setIsLoading(false);\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n            alert(\"Please fill out all the fields\");\r\n        }\r\n        setIsLoading(false);\r\n    }\r\n\r\n\r\n    async function getTokenId() {\r\n        const contract = new ethers.Contract(contract1155Address, contract1155ABI, signer);\r\n        const contractWithSigner = contract.connect(signer)\r\n        const tx = await contractWithSigner.IDs()\r\n        console.log(tx)\r\n        return tx\r\n    }\r\n\r\n    async function handleMint() {\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <StyledBox\r\n\r\n        >\r\n\r\n            <div style={test}>\r\n\r\n                <section className=\"container\">\r\n                    <Container {...getRootProps({ isFocused, isDragAccept, isDragReject })}>\r\n                        <input {...getInputProps()} />\r\n                        <p>Drag 'n' drop some files here, or click to select files</p>\r\n                    </Container>\r\n                    <aside style={thumbsContainer}>\r\n                        {thumbs}\r\n                    </aside>\r\n                </section>\r\n            </div>\r\n\r\n\r\n            <form\r\n\r\n                onSubmit={handleIpfs}\r\n                style={{ display: 'flex', flexDirection: 'column', }}\r\n\r\n            >\r\n\r\n\r\n                <TextField\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleNameChange}\r\n                />\r\n\r\n\r\n                <TextField\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                    value={description}\r\n                    onChange={handleDescriptionChange}\r\n                />\r\n\r\n\r\n\r\n                <TextField\r\n                    label=\"Price\"\r\n                    name=\"price\"\r\n                    value={price}\r\n                    onChange={handlePriceChange}\r\n                />\r\n\r\n\r\n                <TextField\r\n                    label=\"MaxSupply\"\r\n                    name=\"maxSupply\"\r\n                    value={maxSupply}\r\n                    onChange={handleMaxSupplyChange}\r\n                />\r\n\r\n\r\n\r\n                <Button variant='contained' type=\"submit\">Create NFT</Button>\r\n            </form>\r\n            {/* <Button variant='contained' onClick={getTokenId}>getID</Button> */}\r\n        </StyledBox>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   form: {\r\n//     '& .MuiTextField-root': {\r\n//       margin: theme.spacing(1),\r\n//       width: '25ch',\r\n//     },\r\n//   },\r\n// }));\r\n\r\n\r\n// image cid 에 앞에 https://ipfs.io/ipfs/ 붙여서 넣어야함\r\n// function NFTMetadataForm({ imageCID }) {\r\n//     //   const classes = useStyles();\r\n//     const [metadata, setMetadata] = useState({ name: '', description: '', image: `https://ipfs.io/ipfs/${imageCID}` });\r\n\r\n//     const handleChange = (event) => {\r\n//         setMetadata({ ...metadata, [event.target.name]: event.target.value });\r\n//     };\r\n\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n//         console.log(metadata);\r\n//         // const image = getExampleImage(metadata.image); // metadata.image가 안바뀜\r\n//         // const image = getExampleImage(\"http://ipfs.io/ipfs/\" + imageCID); // metadata.image가 안바뀜\r\n//         const image = \"http://ipfs.io/ipfs/\" + imageCID;\r\n//         // code to handle NFT metadata submission goes here\r\n//         const metadataForUpload = {\r\n//             name: metadata.name.toString(),\r\n//             description: metadata.description.toString(),\r\n//             image,\r\n//         }\r\n//         let mCid = await ipfsUploadMetadata(metadataForUpload);\r\n//         console.log(mCid);\r\n\r\n\r\n//     };\r\n\r\n//     return (\r\n//         <form\r\n\r\n//             onSubmit={handleSubmit}\r\n//             style={{ display: 'flex', flexDirection: 'column', width: \"100%\", margin: '24px' }}\r\n\r\n//         >\r\n//             <TextField\r\n//                 label=\"Name\"\r\n//                 name=\"name\"\r\n//                 value={metadata.name}\r\n//                 onChange={handleChange}\r\n//             />\r\n//             <TextField\r\n//                 label=\"Description\"\r\n//                 name=\"description\"\r\n//                 value={metadata.description}\r\n//                 onChange={handleChange}\r\n//             />\r\n//             {/* <TextField\r\n//                 label=\"Image URL\"\r\n//                 name=\"image\"\r\n//                 value={`https://ipfs.io/ipfs/${imageCID}`}\r\n//                 // onChange={handleChange}\r\n//             /> */}\r\n//             <Button variant='contained' type=\"submit\">Submit</Button>\r\n//         </form>\r\n//     );\r\n// }\r\n","import React, { useEffect, useState } from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport { styled } from '@mui/system';\r\nimport { Button, Fade, Grow, TextField } from '@mui/material';\r\nimport { useMinterLabStore } from '../hooks';\r\nimport { useAccount, useNetwork, useSigner } from 'wagmi';\r\nimport axios from 'axios';\r\nimport { ethers } from 'ethers';\r\nimport { contract1155ABI,chainSymbol } from '../contracts';\r\n\r\n\r\nimport chainIconsMap from '../hooks/chainIcons'\r\n\r\nconst StyledNiftyGatewayCardContainer = styled(Card)(({ theme }) => ({\r\n    height: '415px',\r\n    // height: '445px',\r\n    width: '278px',\r\n    padding: '12px',\r\n\r\n\r\n}));\r\n\r\nconst StyledNiftyGatewayCard = styled(Card)(({ theme }) => ({\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100%\",\r\n}));\r\n\r\nconst StyledNiftyGatewayCardMediaContainer = styled(Card)(({ theme }) => ({\r\n    position: 'relative',\r\n    borderRadius: '12px 12px 0px 0px',\r\n    overflow: 'hidden',\r\n    textAlign: 'center',\r\n    paddingBottom: '100%',\r\n    height: '0px',\r\n    transform: 'translateZ(0px)'\r\n}));\r\n\r\nconst StyledCardMedia = styled(CardMedia)({\r\n    display: 'initial',\r\n    pointerEvents: 'none',\r\n    position: 'absolute',\r\n    top: '0px',\r\n    left: '0px',\r\n    // width: '100%',\r\n    // height: '100%',\r\n    width: '254px',\r\n    height: '254px',\r\n    objectFit: 'cover',\r\n    zIndex: '-1'\r\n});\r\n\r\nconst StyledCardUpdater = styled(Box)({\r\n    display: 'initial',\r\n    // pointerEvents: 'none',\r\n    position: 'absolute',\r\n    top: '0px',\r\n    left: '0px',\r\n    width: '254px',\r\n    height: '254px',\r\n    objectFit: 'cover',\r\n    zIndex: '-1'\r\n});\r\n\r\nconst StyledNiftyGatewayCardContentContainer = styled(Card)(({ theme }) => ({\r\n    position: 'relative',\r\n    // backgroundColor: 'white',\r\n    backgroundColor: \"#474d57\",\r\n    borderRadius: '0px 0px 12px 12px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    border: '1px solid rgb(252, 213, 53)',\r\n    flex: '1 1 0%',\r\n    padding: '12px'\r\n}));\r\n\r\n\r\n\r\n\r\n\r\nconst StyledName = styled(Typography)(({ theme }) => ({\r\n    margin: '0px 24px 4px 0px',\r\n    textDecoration: 'none',\r\n    overflow: 'hidden',\r\n    whiteSpace: 'nowrap',\r\n    textOverflow: 'ellipsis',\r\n    fontWeight: '700',\r\n    fontSize: '16px',\r\n    lineHeight: '1.5',\r\n    fontFamily: 'MessinaSans, sans-serif'\r\n\r\n}));\r\n\r\n\r\nconst StyledPrice = styled(Typography)(({ theme }) => ({\r\n    margin: '0px 0px 4px',\r\n    textDecoration: 'none',\r\n    fontWeight: '600',\r\n    fontSize: '14px',\r\n    fontFamily: 'MessinaSans, sans-serif',\r\n    lineHeight: '1.5'\r\n\r\n}));\r\n\r\nconst StyledFloorePrice = styled(Typography)(({ theme }) => ({\r\n    margin: '0px',\r\n    textDecoration: 'none',\r\n    // color: 'rgb(97, 97, 97)',\r\n    fontWeight: '600',\r\n    fontSize: '12px',\r\n    lineHeight: '1.5',\r\n    fontFamily: 'MessinaSans, sans-serif'\r\n\r\n}));\r\n\r\nconst StyledEditionsBox = styled(Box)(({ theme }) => ({\r\n\r\n    position: 'relative',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flex: '1 1 0%',\r\n    paddingTop: '8px',\r\n    marginTop: '8px',\r\n    borderTop: '1px solid rgb(238, 238, 238)'\r\n}));\r\n\r\n\r\nconst StyledEdition = styled(Box)(({ theme }) => ({\r\n\r\n    position: 'relative',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flex: '1 1 0%',\r\n    minHeight: 'initial'\r\n}));\r\n\r\nconst StyledEditionRow = styled(Box)(({ theme }) => ({\r\n\r\n    display: 'flex',\r\n    WebkitBoxPack: 'justify',\r\n    justifyContent: 'space-between',\r\n    WebkitBoxAlign: 'center',\r\n    alignItems: 'center',\r\n    flexWrap: 'nowrap',\r\n    gap: '32px'\r\n}));\r\n\r\nconst StyledEditionRowName = styled(Typography)(({ theme }) => ({\r\n\r\n    margin: '0px',\r\n    textDecoration: 'none',\r\n    // color: 'rgb(97, 97, 97)',\r\n    fontWeight: '400',\r\n    fontSize: '14px',\r\n    lineHeight: '1.5',\r\n    fontFamily: 'MessinaSans, sans-serif'\r\n\r\n\r\n\r\n}));\r\n\r\nconst StyledEditionRowValue = styled(Typography)(({ theme }) => ({\r\n\r\n\r\n    margin: '0px',\r\n    textDecoration: 'none',\r\n    textAlign: 'right',\r\n    textOverflow: 'ellipsis',\r\n    overflow: 'hidden',\r\n    whiteSpace: 'nowrap',\r\n    fontWeight: '400',\r\n    fontSize: '14px',\r\n    lineHeight: '1.5',\r\n    fontFamily: 'MessinaSans, sans-serif'\r\n\r\n\r\n}));\r\n\r\nconst StyledChainLogo = styled(Box)(({ theme }) => ({\r\n    position: 'absolute',\r\n    top: '12px',\r\n    right: '12px',\r\n\r\n}));\r\n\r\nconst StyledInputRow = styled(Box)(({ theme }) => ({\r\n    display: 'flex',\r\n    // WebkitBoxPack: 'justify',\r\n    // justifyContent: 'space-between',\r\n    // WebkitBoxAlign: 'center',\r\n    // alignItems: 'center',\r\n    // flexWrap: 'nowrap',\r\n    // gap: '32px',\r\n    // marginTop: '8px',\r\n    // marginBottom: '8px'\r\n    // height: '32px',\r\n    margin: \"12px\"\r\n}));\r\n\r\nconst NiftyGatewayCard = ({ tokenId, tokenURL, totalSupplyProp, priceProp, maxSupplyProp }) => {\r\n\r\n\r\n    const { chain } = useNetwork()\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [nftImageCid, setNftImageCid] = useState(\"\");\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n\r\n\r\n    const { data: signer, isError, isLoading } = useSigner()\r\n\r\n    const account = useAccount()\r\n\r\n\r\n\r\n\r\n    const [totalSupply, setTotalSupply] = useState(totalSupplyProp);\r\n    const [price, setPrice] = useState(priceProp);\r\n    const [maxSupply, setMaxSupply] = useState(maxSupplyProp);\r\n\r\n    const contract1155Address = useMinterLabStore(state => state.contract1155Address)\r\n\r\n    const [checked, setChecked] = React.useState(false);\r\n\r\n    // const handleChange = () => {\r\n    //     setChecked((prev) => !prev);\r\n    // };\r\n\r\n\r\n\r\n\r\n    async function handleMint() {\r\n        console.log(\"minting\");\r\n\r\n\r\n\r\n        const contract = new ethers.Contract(contract1155Address, contract1155ABI, signer);\r\n        const contractWithSigner = contract.connect(signer)\r\n\r\n        console.log(account.address);\r\n\r\n        const tx = await contractWithSigner.mintSingle(account.address, tokenId, 1, { value: ethers.utils.parseEther(`${price}`), gasLimit: \"1000000\" })\r\n\r\n        const rc = await tx.wait()\r\n\r\n        console.log(tx);\r\n        console.log(rc);\r\n\r\n        setTotalSupply(totalSupply + 1)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(\"test\");\r\n\r\n        async function fetchNFTData() {\r\n\r\n            try {\r\n\r\n                setLoading(true)\r\n\r\n                axios.get(tokenURL).then((res) => {\r\n                    console.log(res.data.image);\r\n                    setNftImageCid(res.data.image)\r\n                    setName(res.data.name)\r\n                    setDescription(res.data.description)\r\n                    setLoading(false)\r\n                })\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n\r\n            } finally {\r\n                // setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchNFTData()\r\n    }, []);\r\n\r\n    const Logo = chainIconsMap[chain.id]\r\n\r\n    function priceFormatter(price) {\r\n        const priceMultipliedByCoinPrice = price * 0.03184;\r\n    \r\n        const priceFixed = priceMultipliedByCoinPrice.toFixed(9);\r\n \r\n        return priceFixed\r\n    }\r\n\r\n    return (\r\n        <StyledNiftyGatewayCardContainer>\r\n            {\r\n                checked ?\r\n                    (\r\n                        <StyledNiftyGatewayCard>\r\n                            <StyledNiftyGatewayCardMediaContainer>\r\n                                <StyledCardUpdater>\r\n                                    <div>\r\n                                        <StyledInputRow>\r\n                                            <TextField size=\"small\" label=\"Price\" variant=\"filled\" />\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                variant=\"contained\" color=\"primary\" onClick={handleMint}>\r\n\r\n                                                Update\r\n                                            </Button>\r\n                                        </StyledInputRow>\r\n\r\n                                        <StyledInputRow>\r\n                                            <TextField size=\"small\" label=\"Max Supply\" variant=\"filled\" />\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                variant=\"contained\" color=\"primary\" onClick={handleMint}>\r\n\r\n                                                Update\r\n                                            </Button>\r\n                                        </StyledInputRow>\r\n\r\n                                    </div>\r\n                                </StyledCardUpdater>\r\n                            </StyledNiftyGatewayCardMediaContainer>\r\n                            <StyledNiftyGatewayCardContentContainer>\r\n                                <StyledChainLogo>\r\n                                    <Logo />\r\n                                </StyledChainLogo>\r\n                                <StyledName component=\"p\">\r\n                                    {name}\r\n                                </StyledName>\r\n                                <StyledPrice component=\"p\">\r\n                                <span>${priceFormatter(price)}</span>\r\n                                    &nbsp;\r\n                                    <StyledFloorePrice component=\"span\">\r\n                                        = {price} {chainSymbol[chain.id]}\r\n                                    </StyledFloorePrice>\r\n                                </StyledPrice>\r\n                                <StyledEditionsBox>\r\n                                    <StyledEdition>\r\n                                        <StyledEditionRow>\r\n                                            <StyledEditionRowName component=\"p\">\r\n                                                Editions\r\n                                            </StyledEditionRowName>\r\n                                            <StyledEditionRowValue component=\"p\">\r\n                                                {totalSupply}/{maxSupply}\r\n                                            </StyledEditionRowValue>\r\n                                        </StyledEditionRow>\r\n                                        <Button\r\n                                            sx={{\r\n                                                height: '24px',\r\n                                            }}\r\n                                            fullWidth size='small' variant='contained'\r\n                                            // onClick={handleChange}\r\n                                        >\r\n                                            BACK\r\n                                        </Button>\r\n                                    </StyledEdition>\r\n                                </StyledEditionsBox>\r\n                            </StyledNiftyGatewayCardContentContainer>\r\n                        </StyledNiftyGatewayCard >\r\n                    ) : (\r\n\r\n                        <StyledNiftyGatewayCard>\r\n                            <StyledNiftyGatewayCardMediaContainer>\r\n                                <StyledCardMedia component=\"img\" height=\"200\" image={nftImageCid} alt={name} />\r\n                            </StyledNiftyGatewayCardMediaContainer>\r\n                            <StyledNiftyGatewayCardContentContainer>\r\n                                <StyledChainLogo>\r\n                                    {/* <img src=\"https://www.niftygateway.com/static/media/polygon.eac3b5bb94b5760aeb108cc4d95c9921.svg\" alt=\"Polygon Logo\" width=\"20\" height=\"20\" /> */}\r\n                                    {/* <img src=\"https://www.niftygateway.com/static/media/polygon.eac3b5bb94b5760aeb108cc4d95c9921.svg\" alt=\"Polygon Logo\" width=\"20\" height=\"20\" /> */}\r\n                                    <Logo />\r\n                                </StyledChainLogo>\r\n                                <StyledName component=\"p\">\r\n                                    {name}\r\n                                </StyledName>\r\n                                <StyledPrice component=\"p\">\r\n                                <span>${priceFormatter(price)}</span>\r\n                                    &nbsp;\r\n                                    <StyledFloorePrice component=\"span\">\r\n                                        = {price} {chainSymbol[chain.id]}\r\n                                    </StyledFloorePrice>\r\n                                </StyledPrice>\r\n                                <StyledEditionsBox>\r\n                                    <StyledEdition>\r\n                                        <StyledEditionRow>\r\n                                            <StyledEditionRowName component=\"p\">\r\n                                                Editions\r\n                                            </StyledEditionRowName>\r\n                                            <StyledEditionRowValue component=\"p\">\r\n                                                {totalSupply}/{maxSupply}\r\n                                            </StyledEditionRowValue>\r\n                                        </StyledEditionRow>\r\n                                        <Button\r\n                                            sx={{\r\n                                                height: '24px',\r\n                                            }}\r\n                                            fullWidth size='small' variant='contained'\r\n                                            onClick={handleMint}\r\n                                        >\r\n                                            MINT\r\n                                        </Button>\r\n                                    </StyledEdition>\r\n                                </StyledEditionsBox>\r\n                            </StyledNiftyGatewayCardContentContainer>\r\n                        </StyledNiftyGatewayCard >\r\n                    )\r\n\r\n            }\r\n\r\n        </StyledNiftyGatewayCardContainer >\r\n    );\r\n};\r\n\r\n// const UnmanageableCard = ({ nft }) => {\r\n//     const { title, description, imageUrl, creator, price } = nft;\r\n\r\n\r\n\r\n\r\nexport default NiftyGatewayCard;","import React from \"react\";\r\nimport { Button, Container, Typography } from \"@mui/material\";\r\n\r\nexport const MetamaskInstall = () => {\r\n  const handleInstallMetamask = () => {\r\n    // Redirect user to the MetaMask installation page\r\n    // window.location.href = \"https://metamask.io/download.html\";\r\n    // open in new tab\r\n    window.open(\"https://metamask.io/download.html\", \"_blank\");\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" style={{ marginTop: \"2rem\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n    <img src=\"https://upload.wikimedia.org/wikipedia/commons/3/36/MetaMask_Fox.svg\" alt=\"MetaMask logo\" style={{ width: \"100%\" }} />\r\n    <Typography variant=\"h4\" align=\"center\" gutterBottom>\r\n      Install MetaMask to continue\r\n    </Typography>\r\n    <Typography variant=\"body1\" align=\"center\" gutterBottom>\r\n      MetaMask is a browser extension that allows you to interact with Ethereum-based decentralized applications (dApps) like ours.\r\n    </Typography>\r\n    <Typography variant=\"body1\" align=\"center\" gutterBottom>\r\n      If you don't already have it installed, please follow the link below to download and install it for your browser.\r\n    </Typography>\r\n    <Button variant=\"contained\" color=\"primary\" onClick={handleInstallMetamask} style={{ marginTop: \"2rem\" }}>\r\n      Install MetaMask\r\n    </Button>\r\n  </Container>\r\n  );\r\n};\r\n\r\n","\r\nimport { Link, useParams } from \"react-router-dom\"\r\n\r\nimport ShareIcon from '@mui/icons-material/Share';\r\n// import { Box } from \"@mui/system\";\r\nimport { primaryColor } from \"../utils/theme\";\r\nimport { useAccount, useSigner, useSwitchNetwork, useNetwork, useProvider } from \"wagmi\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useMinterLabStore } from \"../hooks\";\r\nimport axios from 'axios';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia,\r\n    Skeleton,\r\n    Switch,\r\n    Typography,\r\n    Grow,\r\n    TextField,\r\n    IconButton\r\n} from '@mui/material';\r\n\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport { isChainTestnet, chainName, contract1155ABI } from \"../contracts\";\r\n\r\nimport { PleaseCreateContract } from '../components/PleaseCreateContract';\r\n\r\nimport { getAccount, getNetwork } from '@wagmi/core'\r\n\r\nimport MintableNFTCard from \"../components/MintableNFTCard\";\r\nimport { MetamaskInstall } from \"./metamaskInstall\";\r\n\r\nconst ListContainer = styled(Box)`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  margin: 20px 0;\r\n`;\r\n\r\n\r\nconst StyledCard = styled(Card)`\r\n// display: flex;\r\n// flex-direction: column;\r\n// align-items: center;\r\n// justify-content: center;\r\nwidth: 320px;\r\nheight: 464px;\r\n// border: 1px solid #ccc;\r\nborder-radius: 10px;\r\n&:hover {\r\n    // border: 1px solid #DAEE01;\r\n    box-shadow: 0px 0px 10px #DAEE01;\r\n\r\n}\r\n// overflow: hidden;\r\noverflow: 'hidden';\r\nmargin: 20px;\r\n`\r\n\r\nexport function MintingPage() {\r\n    const isContractCreatedWithAccount = useMinterLabStore(state => state.isContractCreatedWithAccount)\r\n\r\n\r\n    const isMetamaskInstalled = !(typeof window.ethereum === \"undefined\")\r\n    return (\r\n        <div>\r\n\r\n            {\r\n                isMetamaskInstalled ? <MintingPageWhenContractExist /> : <MetamaskInstall />\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function MintingPageWhenContractExist() {\r\n\r\n\r\n    const { chainId, contract1155Address } = useParams()\r\n    console.log(chainId)\r\n    console.log(contract1155Address)\r\n\r\n    return (\r\n        <div>\r\n\r\n            {contract1155Address ? <Buyer contract1155Address={contract1155Address} chainId={chainId} /> : <Seller />}\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Seller() {\r\n\r\n    // const selectedCollection = useMinterLabStore(state => state.selectedCollection);\r\n\r\n    // 이것도 , 처음에 로드할때 , 불러오는걸로 하자 ...\r\n    // const chainId = 80001;\r\n    const { chain } = getNetwork()\r\n    const chainId = chain?.id\r\n    const contract1155Address = useMinterLabStore(state => state.contract1155Address);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Seller</h1>\r\n            <h3>Dashboard for seller</h3>\r\n\r\n            <>\r\n                <Button variant=\"contained\" to={`/MintingPage/${chainId}/${contract1155Address}`} LinkComponent={Link}>Move to Minting Page</Button>\r\n                <Button variant=\"contained\" target=\"_blank\" href={`https://testnet-zkevm.polygonscan.com/address/${contract1155Address}`} >Check on zkEVM scan</Button>\r\n            </>\r\n\r\n\r\n            {/* <Link }>Move to Minting Page</Link> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 시나리오 케이스\r\n// 컬렉션 선택을 안한 상태 => 선택을 해주세요\r\n// 현재의 선택된 컬렉션을 zustand? 그래서 자동으로 보여주기?\r\n\r\n// 잘못된 url 로 접근했을때, 존재하지 않는 컬렉션입니다. 주소를 확인해주세요\r\n\r\n\r\n// function PleaseSelect\r\n\r\n// http://smarthug.github.io/minter-lab-1155/#/MintingPage/undefined/undefined/undefined\r\n\r\n//http://smarthug.github.io/minter-lab-1155/#/MintingPage/eth/mainnet/0x6d77be275C36761A53DBAf957fB516fA10fFf00E\r\n\r\n// 두개로 아예 나누자 \r\n// url 에 contract1155Address 가 있냐에 따라\r\n// 있으면 , 소비자용 민팅 페이지\r\n// 없으면 , 소유자용 민팅 페이지 , 필요한지 의문?\r\n\r\n\r\nfunction Buyer({ contract1155Address, chainId }) {\r\n    // 소비자용 민팅 페이지\r\n    // contract1155Address 가 있어야함\r\n\r\n    // const { chainId, contract1155Address } = useParams()\r\n    // console.log(chainId)\r\n    // console.log(contract1155Address)\r\n    // 이것도 , 처음에 로드할때 , 불러오는걸로 하자 ...\r\n    // const chainId = 80001;\r\n    // const contract1155Address = useMinterLabStore(state => state.contract1155Address);\r\n    // const contract1155Address = useMinterLabStore(state => state.contract1155Address);\r\n\r\n    const account = useAccount()\r\n\r\n    // 지갑 있는 사용자 용\r\n    const { switchNetworkAsync, isSuccess } = useSwitchNetwork({\r\n        onSuccess: () => {\r\n            console.log(\"success\");\r\n            // setTimeout(() => {\r\n\r\n\r\n            // mint();\r\n            // }, 3000);\r\n        }\r\n    })\r\n\r\n    // \r\n\r\n\r\n\r\n    const { chain } = useNetwork();\r\n    const userWalletChainId = chain?.id ?? 0\r\n    console.log(\"userwalletchainid\", userWalletChainId);\r\n\r\n    const { data: signer, isError } = useSigner()\r\n\r\n    const setIsLoading = useMinterLabStore(state => state.setIsLoading)\r\n\r\n\r\n    // async function checkChain() {\r\n    //     if (Number(chainId) !== userWalletChainId) {\r\n\r\n    //         console.log(\"switchNetworkAsync\", switchNetworkAsync);\r\n    //         // switchNetwork?.(+chainId)\r\n\r\n    //         // switchNetwork?.(+chainId)\r\n\r\n    //         if (switchNetworkAsync) {\r\n    //             return switchNetworkAsync(+chainId)\r\n\r\n    //         } else {\r\n    //             alert(\"Please get metamask extension.\")\r\n    //             return false;\r\n    //         }\r\n    //     } else {\r\n    //         mint();\r\n    //     }\r\n\r\n    // }\r\n\r\n    // async function mint() {\r\n    //     console.log(\"mint\");\r\n\r\n    //     // 지갑이 연결되어 있는지 확인\r\n    //     if (!account.address) {\r\n    //         alert(\"Please connect your wallet.\")\r\n    //         return;\r\n    //     }\r\n\r\n    //     // 지갑과 연결된 체인이랑, 컬렉션의 체인이랑 같은지 확인\r\n    //     if (Number(chainId) !== userWalletChainId) {\r\n    //         alert(\"Please change your wallet to the correct chain.\")\r\n    //         return;\r\n    //     }\r\n\r\n\r\n    //     try {\r\n\r\n    //         setIsLoading(true)\r\n\r\n    //         const contract = new ethers.Contract(contract1155Address, contract1155ABI, signer);\r\n    //         const contractWithSigner = contract.connect(signer)\r\n\r\n    //         const tx = await contractWithSigner.mintMultiple(account.address, 1)\r\n    //         const rc = await tx.wait()\r\n\r\n    //         console.log(tx);\r\n    //         console.log(rc);\r\n    //     } catch (error) {\r\n    //         console.error(error);\r\n    //         alert(\"failed to mint\")\r\n    //     } finally {\r\n    //         setIsLoading(false)\r\n    //     }\r\n\r\n    //     // setIsLoading(false)\r\n\r\n    // }\r\n\r\n    function share() {\r\n        if (navigator.share) {\r\n            navigator.share({\r\n                title: \"Minter Lab\",\r\n                text: \"Mint your NFT\",\r\n                url: `https://smarthug.github.io/minter-lab-1155/#/MintingPage/${chainId}/${contract1155Address}`\r\n            }).then(() => { console.log(\"share success\") }).catch((err) => { console.log(err); })\r\n        }\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     console.log(\"buyer minting page useEffect\");\r\n\r\n    //     if (Number(chainId) !== userWalletChainId) {\r\n\r\n    //         console.log(\"switchNetworkAsync\", switchNetworkAsync);\r\n    //         // switchNetwork?.(+chainId)\r\n\r\n    //         // switchNetwork?.(+chainId)\r\n\r\n    //         if (switchNetworkAsync) {\r\n    //             switchNetworkAsync(+chainId)\r\n\r\n    //         }\r\n    //     }\r\n\r\n\r\n\r\n\r\n    // }, [switchNetworkAsync, chainId, userWalletChainId])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Box sx={{ \"display\": 'flex' }} >\r\n\r\n                <h1 style={{ \"flexGrow\": 0, \"margin\": 0 }}>Minting Page</h1>\r\n                <IconButton onClick={share} size=\"large\" aria-label=\"delete\">\r\n                    <ShareIcon fontSize=\"inherit\" style={{\r\n                        \"color\": primaryColor,\r\n                    }} />\r\n                </IconButton>\r\n            </Box>\r\n            <h1>Buyer</h1>\r\n            <h3>Your wallet address : {account.address ?? \"Please Install Metamask wallet\"}</h3>\r\n            <h4>Your wallet is on : {chainName[userWalletChainId]}</h4>\r\n            <h4>This NFT is on {chainName[chainId]}</h4>\r\n            <h4>NFT Contract Address is {contract1155Address}</h4>\r\n\r\n            {/* <Button disabled={false} variant=\"contained\" onClick={mint}>Mint</Button> */}\r\n\r\n            <Button variant=\"contained\" target=\"_blank\" href={`https://testnet-zkevm.polygonscan.com/address/${contract1155Address}`} >Check on zkEVM scan</Button>\r\n\r\n            <ManageNFT chainId={chainId} contract1155Address={contract1155Address} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// function Seller() {\r\n\r\n//     const selectedCollection = useMinterLabStore(state => state.selectedCollection);\r\n\r\n//     const chainId = 80001;\r\n//     const contract1155Address = \"0x75c3e5E4a309cd7e193F47508A16D1a9Db8C1182\";\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1>Seller</h1>\r\n//             <h3>Dashboard for seller</h3>\r\n//             {selectedCollection ?\r\n//                 <>\r\n//                     <Button variant=\"contained\" to={`/MintingPage/${selectedCollection.chainId}/${selectedCollection.contract1155Address}`} LinkComponent={Link}>Move to Minting Page</Button>\r\n//                     <Button variant=\"contained\" target=\"_blank\" href={`https://${isChainTestnet[selectedCollection.chainId] ? \"testnets.\" : \"\"}opensea.io/assets?search[query]=${selectedCollection.contract1155Address}`} >Check on Opensea</Button>\r\n//                 </>\r\n//                 :\r\n//                 <h3>Please Select Collection</h3>\r\n//             }\r\n//             {/* <Link }>Move to Minting Page</Link> */}\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nfunction ManageNFT({ chainId, contract1155Address }) {\r\n\r\n    const { data: signer, isError, isLoading } = useSigner()\r\n\r\n\r\n\r\n\r\n    // const [contract1155Address, setContract1155Address] = useState(null)\r\n\r\n    // const contract1155Address = \"0xBe29265464064d382724bB4801Dd87528CbB349B\"\r\n    // const contract1155Address = useMinterLabStore(state => state.contract1155Address)\r\n    const provider = useProvider()\r\n\r\n    const [nftInfoList, setNftInfoList] = useState([])\r\n\r\n    useEffect(() => {\r\n\r\n        async function FetchAllNFTInfo() {\r\n            try {\r\n                console.log(\"wtf ffffffffffffff\")\r\n                console.log(contract1155Address)\r\n                const contract1155 = new ethers.Contract(`${contract1155Address}`, contract1155ABI, provider);\r\n\r\n\r\n\r\n\r\n                const tx1155 = await contract1155.getValues(0, 100)\r\n                console.log(tx1155)\r\n\r\n\r\n                console.log(tx1155[0].toNumber())\r\n                const tmpArray = []\r\n                for (let index = 0; index < tx1155[0].toNumber(); index++) {\r\n                    const maxSupply = tx1155[1][index];\r\n                    const totalSupply = tx1155[2][index];\r\n                    const price = tx1155[3][index];\r\n                    const tokenURL = tx1155[4][index];\r\n\r\n\r\n\r\n                    const NFTObj = {\r\n                        id: index,\r\n                        totalSupply: totalSupply.toNumber(),\r\n                        maxSupply: maxSupply.toNumber(),\r\n                        price: ethers.utils.formatUnits(price, 18),\r\n                        tokenURL: tokenURL\r\n                    }\r\n\r\n                    tmpArray.push(NFTObj)\r\n                }\r\n\r\n\r\n                setNftInfoList(tmpArray)\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n                // alert(error.message)\r\n                alert(\"connect Wallet first\")\r\n\r\n            } finally {\r\n                // setIsLoading(false)\r\n            }\r\n        }\r\n\r\n\r\n        FetchAllNFTInfo()\r\n    }, [provider, contract1155Address])\r\n\r\n\r\n    // async function FetchAllNFTInfo() {\r\n    //     console.log(\"?????????????????????\")\r\n    //     try {\r\n    //         const contract = new ethers.Contract(contract1155Address, contract1155ABI, provider);\r\n    //         const contractWithSigner = contract.connect(signer);\r\n    //         // const tx1155 = await contractWithSigner.get(account.address,\"0\", \"1\")\r\n\r\n    //         const tx1155 = await contractWithSigner.IDs();\r\n    //         // const tx1155 = await contractWithSigner.setNewSale(0, ethers.utils.parseUnits(\"0.1\", 18), 99,\"https://bafkreiettzzj252n22wriwzj55ojjukyvuenk74gejhff5u5n6t5tggmu4.ipfs.nftstorage.link\")\r\n\r\n    //         console.log(tx1155);\r\n    //         console.log(\"wth\")\r\n    //         const IDs = await tx1155.toNumber();\r\n\r\n\r\n    //         const NFTList = []\r\n\r\n    //         for (let i = 0; i < IDs; i++) {\r\n    //             const totalSupply = await contractWithSigner.totalSupply(i);\r\n    //             const maxSupply = await contractWithSigner.maxSupply(i);\r\n    //             const price = await contractWithSigner.price(i);\r\n    //             const tokenURL = await contractWithSigner.tokenURL(i);\r\n\r\n    //             const NFTObj = {\r\n    //                 id: i,\r\n    //                 totalSupply: totalSupply.toNumber(),\r\n    //                 maxSupply: maxSupply.toNumber(),\r\n    //                 price: ethers.utils.formatUnits(price, 18),\r\n    //                 tokenURL: tokenURL\r\n    //             }\r\n\r\n    //             NFTList.push(NFTObj)\r\n    //         }\r\n\r\n    //         console.log(NFTList);\r\n\r\n    //         setNftInfoList(NFTList)\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     } finally {\r\n\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                    padding: \"20px 20px\",\r\n                }}\r\n            >\r\n                <h1>Manage NFT</h1>\r\n                <h2>{contract1155Address}</h2>\r\n                {/* <button onClick={FetchAllNFTInfo}>\r\n                    Refresh\r\n                </button> */}\r\n\r\n\r\n            </div>\r\n            {contract1155Address !== null ? <NFTInfoCardList nftInfoList={nftInfoList} contract1155Address={contract1155Address} chainId={chainId} /> : <h1>Create Your First NFT </h1>}\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nfunction NFTInfoCardList({ nftInfoList, contract1155Address, chainId }) {\r\n    console.log(nftInfoList);\r\n\r\n    return (\r\n        <ListContainer >\r\n\r\n            {nftInfoList.map(({ tokenURL, price, maxSupply, totalSupply }, index) => {\r\n                return (\r\n                    <MintableNFTCard key={index} tokenId={index} tokenURL={tokenURL} priceProp={price} maxSupplyProp={maxSupply} totalSupplyProp={totalSupply} contract1155Address={contract1155Address} chainId={chainId} />\r\n                )\r\n            })}\r\n        </ListContainer>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n","import { Button, Switch } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport { getCollections, importCollections } from \"../utils/db\";\r\n\r\nimport { manager1155AddressByChainId, manager1155ABI } from \"../contracts\";\r\nimport { useAccount, useNetwork, useProvider, useSigner } from \"wagmi\";\r\nimport { ethers } from \"ethers\";\r\n\r\nexport function Settings() {\r\n\r\n    const account = useAccount();\r\n    const provider = useProvider()\r\n\r\n    const { chain } = useNetwork()\r\n\r\n    const { data: signer, isError, isLoading } = useSigner()\r\n\r\n    function handleExport() {\r\n        getCollections().then((collections) => {\r\n            // console.log(collections);\r\n\r\n            // 나중에 settings 등 추가가능\r\n            const exportJson = {\r\n                collections: collections\r\n            }\r\n\r\n            const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exportJson));\r\n            const downloadAnchorNode = document.createElement('a');\r\n            downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n            downloadAnchorNode.setAttribute(\"download\", \"collections.json\");\r\n            document.body.appendChild(downloadAnchorNode); // required for firefox\r\n            downloadAnchorNode.click();\r\n            downloadAnchorNode.remove();\r\n\r\n\r\n\r\n\r\n        })\r\n    }\r\n\r\n    function handleImport(event) {\r\n        // console.log(event.target.files);\r\n        // console.log(event.target.files[0]);\r\n\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.readAsText(file, \"UTF-8\");\r\n        reader.onload = (evt) => {\r\n            console.log(evt.target.result);\r\n            const collections = JSON.parse(evt.target.result).collections;\r\n            console.log(collections);\r\n            importCollections(collections).then((lastKey) => {\r\n                console.log(lastKey);\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n    async function handleRecovry() {\r\n        console.log(\"handleRecovry\");\r\n\r\n        try {\r\n\r\n            // setIsLoading(true)\r\n            // 사이너가 있어야 되네 .... 없으면 , 주소 안오네 ...\r\n\r\n            const contract = new ethers.Contract(manager1155AddressByChainId[chain.id], manager1155ABI, provider);\r\n            const contractWithSigner = contract.connect(signer);\r\n            console.log(contractWithSigner);\r\n\r\n            const tmpContract1155Address = await contractWithSigner.getMyContractAddress(0, 100)\r\n\r\n            console.log(tmpContract1155Address);\r\n\r\n            // const contract = new ethers.Contract(manager1155AddressByChainId, manager1155ABI, signer);\r\n            // console.log(\"contract\", contract);\r\n\r\n            // const tx = await contract.getMyContractAddress(0, 100)\r\n\r\n            // console.log(tx);\r\n\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n            // alert(error.message)\r\n            alert(\"connect Wallet first\")\r\n\r\n        } finally {\r\n            // setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Settings</h1>\r\n            <h2>Back up Collections</h2>\r\n            <Box>\r\n                <Button onClick={handleExport} variant=\"outlined\" color=\"primary\" size=\"large\" sx={{ m: 1 }}>\r\n                    Export\r\n                </Button>\r\n                <Button component=\"label\" variant=\"outlined\" color=\"primary\" size=\"large\" sx={{ m: 1 }}>\r\n                    Import\r\n                    <input onChange={handleImport} type=\"file\" id=\"file\" accept=\".json\" hidden />\r\n                </Button>\r\n            </Box>\r\n\r\n            <h2>Enable Testnet</h2>\r\n            <div>\r\n                whether to enable testnet\r\n            </div>\r\n            <Box>\r\n                <Switch defaultChecked />\r\n            </Box>\r\n            <Box>\r\n                <h2>Recovery</h2>\r\n                <Button variant=\"outlined\" onClick={handleRecovry} >Get Collections I created</Button>\r\n            </Box>\r\n\r\n        </div>\r\n    )\r\n}","export  function About() {\r\n    console.log(\"About page loaded\")\r\n\r\n    return (\r\n        <div>\r\n            <h1>About</h1>\r\n        </div>\r\n    )\r\n}","export function NotFound() {\r\n  return (\r\n    <div>\r\n      <h1>404</h1>\r\n      <p>Page not found</p>\r\n      <p>Wrong URL</p>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useLayoutEffect } from 'react'\r\nimport { Routes, Route, useNavigate } from 'react-router-dom'\r\n\r\n\r\nimport { ManageNFT, CreateNFT, MintingPage, Settings, About, NotFound, MetamaskInstall } from './pages'\r\n\r\n\r\nexport default function MyRoutes() {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useLayoutEffect(() => {\r\n        if (typeof window.ethereum === \"undefined\") {\r\n            console.log(\"let's install metamask\")\r\n            navigate(\"/MetamaskInstall\");\r\n            // window.history.push(\"/install-metamask\")\r\n        }\r\n    }, [navigate]);\r\n\r\n    return (\r\n        <Routes base>\r\n            {/* <Route exact path={`/CreateCollection`} element={<CreateCollection />} /> */}\r\n            <Route exact path={`/CreateNFT`} element={<CreateNFT />} />\r\n            <Route exact path={`/ManageNFT`} element={<ManageNFT />} />\r\n            <Route path={`/MintingPage/:chainId/:contract1155Address`} element={<MintingPage />} />\r\n            <Route path={`/MintingPage`} element={<MintingPage />} />\r\n            <Route  path={`/MetamaskInstall`} element={<MetamaskInstall />} />\r\n            <Route exact path={`/Settings`} element={<Settings />} />\r\n            <Route exact path={`/`} element={<About />} />\r\n            <Route path={`*`} element={<NotFound />} />\r\n            {/* <Route path={`/`} element={<Home />} /> */}\r\n        </Routes>\r\n    )\r\n}\r\n\r\n// function Home() {\r\n//     return (\r\n//         <div>\r\n//             hello home\r\n//         </div>\r\n//     )\r\n// }","import React, { useEffect } from 'react'\r\nimport { Routes, Route, HashRouter, useNavigate } from 'react-router-dom'\r\nimport AppBar from './components/AppBar'\r\nimport MainContainer from './components/MainContainer'\r\n\r\nimport { ManageNFT, CreateNFT, MintingPage, Settings, About, NotFound, MetamaskInstall } from './pages'\r\n// console.log(process.env.PUBLIC_URL);\r\n//basename={process.env.PUBLIC_URL}\r\nimport MyRoutes from './routes'\r\nexport default function Router() {\r\n\r\n  \r\n\r\n    return (\r\n        <HashRouter >\r\n            <AppBar />\r\n            <MainContainer>\r\n                \r\n\r\n                    <MyRoutes />\r\n               \r\n            </MainContainer>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\n// function Home() {\r\n//     return (\r\n//         <div>\r\n//             hello home\r\n//         </div>\r\n//     )\r\n// }"],"names":["props","xmlns","width","height","fill","x","y","stroke","strokeWidth","rx","id","maskUnits","style","maskType","mask","d","fillOpacity","x1","x2","y1","y2","gradientUnits","stopColor","offset","stopOpacity","fillRule","clipRule","clipPath","cx","cy","r","gradientTransform","transform","SideNav","value","handleChange","Toolbar","Divider","Tabs","orientation","variant","onChange","sx","borderRight","borderColor","Tab","label","to","component","NavLink","XDC","version","xmlnsXlink","viewBox","xmlSpace","points","Ethereum","Polygon","StyledMenuItem","styled","MenuItem","theme","StyledBox","Box","breakpoints","up","marginRight","spacing","NFTSelect","contract1155Address","useMinterLabStore","state","console","log","chain","useNetwork","chainId","Logo","chainIconsMap","account","useAccount","matches","useMediaQuery","FormControl","minWidth","InputLabel","Select","labelId","maxWidth","display","flexWrap","gap","address","chainName","Chip","className","isChainTestnet","size","color","drawerWidth","StateMap","ResponsiveDrawer","React","mobileOpen","setMobileOpen","result","useLocation","pathname","split","setValue","_","newValue","handleDrawerToggle","AppBar","sm","ml","IconButton","edge","onClick","mr","Menu","flexGrow","flexShrink","Drawer","open","onClose","ModalProps","keepMounted","xs","boxSizing","Loading","justifyContent","alignItems","Container","CircularProgress","Home","children","isLoading","marginTop","PleaseCreateContract","StyledNiftyGatewayCardContainer","Card","padding","StyledNiftyGatewayCard","flexDirection","StyledNiftyGatewayCardMediaContainer","position","borderRadius","overflow","textAlign","paddingBottom","StyledCardMedia","CardMedia","pointerEvents","top","left","objectFit","zIndex","StyledCardUpdater","StyledNiftyGatewayCardContentContainer","backgroundColor","border","flex","StyledName","Typography","margin","textDecoration","whiteSpace","textOverflow","fontWeight","fontSize","lineHeight","fontFamily","StyledPrice","StyledFloorePrice","StyledEditionsBox","paddingTop","borderTop","StyledEdition","minHeight","StyledEditionRow","WebkitBoxPack","WebkitBoxAlign","StyledEditionRowName","StyledEditionRowValue","StyledChainLogo","right","StyledInputRow","tokenId","tokenURL","totalSupplyProp","priceProp","maxSupplyProp","useState","setLoading","nftImageCid","setNftImageCid","name","setName","setDescription","useSigner","signer","data","isError","totalSupply","price","setPrice","maxSupply","setMaxSupply","checked","setChecked","priceRef","useRef","maxSupplyRef","prev","current","contract","ethers","contract1155ABI","contractWithSigner","connect","tx","wait","rc","error","useEffect","axios","then","res","image","description","fetchNFTData","priceFormatter","toFixed","inputRef","defaultValue","chainSymbol","fullWidth","alt","ListContainer","ManageNFT","isContractCreatedWithAccount","ManageNFTWhenContractExist","provider","useProvider","nftInfoList","setNftInfoList","useLayoutEffect","contract1155","getValues","tx1155","toNumber","tmpArray","index","NFTObj","push","alert","FetchAllNFTInfo","NFTInfoCardList","map","ManageableNFTCard","client","NFTStorage","token","ipfsUploadImage","files","blob","Blob","storeBlob","cid","status","ipfsUploadMetadata","metadata","JSON","stringify","type","thumbsContainer","thumb","marginBottom","thumbInner","img","test","borderWidth","borderStyle","outline","transition","isDragAccept","isDragReject","isFocused","getColor","CreateNFT","CreateNFTWhenContractExist","CreateNFTWhenContractNotExist","manager1155","manager1155AddressByChainId","manager1155ABI","deployNFTContract","window","location","reload","setFiles","setIsLoading","useDropzone","maxFiles","accept","onDrop","acceptedFiles","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","thumbs","src","onLoad","revokeObjectURL","forEach","handleIpfs","event","preventDefault","length","imageCID","metadataForUpload","tokenURI","undefined","IDs","setNewSale","onSubmit","e","target","setTotalSupply","handleMint","mintSingle","gasLimit","MetamaskInstall","align","gutterBottom","MintingPage","isMetamaskInstalled","ethereum","MintingPageWhenContractExist","useParams","Buyer","Seller","getNetwork","LinkComponent","Link","href","useSwitchNetwork","onSuccess","switchNetworkAsync","isSuccess","userWalletChainId","navigator","share","title","text","url","catch","err","Share","primaryColor","MintableNFTCard","Settings","getMyContractAddress","tmpContract1155Address","getCollections","collections","exportJson","dataStr","encodeURIComponent","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","m","reader","FileReader","readAsText","onload","evt","parse","importCollections","lastKey","hidden","Switch","defaultChecked","About","NotFound","MyRoutes","navigate","useNavigate","base","exact","path","element","Router"],"sourceRoot":""}