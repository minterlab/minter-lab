{"version":3,"file":"static/js/901.1e938bc9.chunk.js","mappings":"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","sources":["../node_modules/multiformats/esm/vendor/base-x.js","../node_modules/multiformats/esm/src/bases/base.js","../node_modules/multiformats/esm/src/bases/base32.js","../node_modules/multiformats/esm/src/bases/base58.js","../node_modules/multiformats/esm/src/bytes.js","../node_modules/multiformats/esm/src/cid.js","../node_modules/multiformats/esm/src/codecs/raw.js","../node_modules/multiformats/esm/src/hashes/digest.js","../node_modules/multiformats/esm/src/hashes/hasher.js","../node_modules/multiformats/esm/src/hashes/sha2-browser.js","../node_modules/multiformats/esm/vendor/varint.js","../node_modules/multiformats/esm/src/varint.js","../node_modules/uint8arrays/esm/src/alloc.js","../node_modules/uint8arrays/esm/src/concat.js","../node_modules/uint8arrays/esm/src/from-string.js","../node_modules/uint8arrays/esm/src/util/as-uint8array.js","../node_modules/multiformats/esm/src/bases/identity.js","../node_modules/multiformats/esm/src/bases/base2.js","../node_modules/multiformats/esm/src/bases/base8.js","../node_modules/multiformats/esm/src/bases/base10.js","../node_modules/multiformats/esm/src/bases/base16.js","../node_modules/multiformats/esm/src/bases/base36.js","../node_modules/multiformats/esm/src/bases/base64.js","../node_modules/multiformats/esm/src/bases/base256emoji.js","../node_modules/multiformats/esm/src/hashes/identity.js","../node_modules/multiformats/esm/src/codecs/json.js","../node_modules/multiformats/esm/src/basics.js","../node_modules/uint8arrays/esm/src/util/bases.js"],"sourcesContent":["function base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;","import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nexport const or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nexport const baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});","import { baseX } from './base.js';\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});","const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};","import * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport class CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest} = this.multihash;\n        const multihash = Digest.create(code, digest);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest = Digest.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [\n      cid,\n      bytes.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(`${ base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58btc.prefix: {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.prefix: {\n      const decoder = base || base32;\n      return [\n        base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;","import { coerce } from '../bytes.js';\nexport const name = 'raw';\nexport const code = 85;\nexport const encode = node => coerce(node);\nexport const decode = data => coerce(data);","import {\n  coerce,\n  equals as equalBytes\n} from '../bytes.js';\nimport * as varint from '../varint.js';\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport class Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}","import * as Digest from './digest.js';\nexport const from = ({name, code, encode}) => new Hasher(name, code, encode);\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? Digest.create(this.code, result) : result.then(digest => Digest.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}","import { from } from './hasher.js';\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});","var encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint');\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode: decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;","import varint from '../vendor/varint.js';\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset);\n  return [\n    code,\n    varint.decode.bytes\n  ];\n};\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset);\n  return target;\n};\nexport const encodingLength = int => {\n  return varint.encodingLength(int);\n};","import { asUint8Array } from './util/as-uint8array.js';\nexport function alloc(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\n    return asUint8Array(globalThis.Buffer.alloc(size));\n  }\n  return new Uint8Array(size);\n}\nexport function allocUnsafe(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\n    return asUint8Array(globalThis.Buffer.allocUnsafe(size));\n  }\n  return new Uint8Array(size);\n}","import { allocUnsafe } from './alloc.js';\nimport { asUint8Array } from './util/as-uint8array.js';\nexport function concat(arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n  const output = allocUnsafe(length);\n  let offset = 0;\n  for (const arr of arrays) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n  return asUint8Array(output);\n}","import bases from './util/bases.js';\nimport { asUint8Array } from './util/as-uint8array.js';\nexport function fromString(string, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n  }\n  return base.decoder.decode(`${ base.prefix }${ string }`);\n}","export function asUint8Array(buf) {\n  if (globalThis.Buffer != null) {\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  return buf;\n}","import { from } from './base.js';\nimport {\n  fromString,\n  toString\n} from '../bytes.js';\nexport const identity = from({\n  prefix: '\\0',\n  name: 'identity',\n  encode: buf => toString(buf),\n  decode: str => fromString(str)\n});","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n});","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n});","import { baseX } from './base.js';\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n});","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n});","import { baseX } from './base.js';\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});","import { from } from './base.js';\nconst alphabet = Array.from('\\uD83D\\uDE80\\uD83E\\uDE90\\u2604\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09\\u2600\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02\\u2764\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09\\u263A\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E\\u270C\\u2728\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D\\u2763\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33\\u270B\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13\\u2B50\\u2705\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6\\u2714\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90\\u2639\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20\\u261D\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B\\u26BD\\uD83E\\uDD19\\u2615\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81\\u26A1\\uD83C\\uDF1E\\uD83C\\uDF88\\u274C\\u270A\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C\\u2708\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74\\u25B6\\u27A1\\u2753\\uD83D\\uDC8E\\uD83D\\uDCB8\\u2B07\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A\\u26A0\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37\\u260E\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51\\u2744\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42');\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\nfunction decode(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${ char }`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n  prefix: '\\uD83D\\uDE80',\n  name: 'base256emoji',\n  encode,\n  decode\n});","import { coerce } from '../bytes.js';\nimport * as Digest from './digest.js';\nconst code = 0;\nconst name = 'identity';\nconst encode = coerce;\nconst digest = input => Digest.create(code, encode(input));\nexport const identity = {\n  code,\n  name,\n  encode,\n  digest\n};","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 512;\nexport const encode = node => textEncoder.encode(JSON.stringify(node));\nexport const decode = data => JSON.parse(textDecoder.decode(data));","import * as identityBase from './bases/identity.js';\nimport * as base2 from './bases/base2.js';\nimport * as base8 from './bases/base8.js';\nimport * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as sha2 from './hashes/sha2.js';\nimport * as identity from './hashes/identity.js';\nimport * as raw from './codecs/raw.js';\nimport * as json from './codecs/json.js';\nimport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes\n} from './index.js';\nconst bases = {\n  ...identityBase,\n  ...base2,\n  ...base8,\n  ...base10,\n  ...base16,\n  ...base32,\n  ...base36,\n  ...base58,\n  ...base64,\n  ...base256emoji\n};\nconst hashes = {\n  ...sha2,\n  ...identity\n};\nconst codecs = {\n  raw,\n  json\n};\nexport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes,\n  hashes,\n  bases,\n  codecs\n};","import { bases } from 'multiformats/basics';\nimport { allocUnsafe } from '../alloc.js';\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: { decode }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = allocUnsafe(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...bases\n};\nexport default BASES;"],"names":["ALPHABET","name","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","Error","it4","vch","encode","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","pbegin","pend","b58","it1","it2","str","repeat","decode","string","Encoder","prefix","baseEncode","this","bytes","Decoder","baseDecode","undefined","codePointAt","prefixCodePoint","text","JSON","stringify","slice","decoder","or","ComposedDecoder","decoders","input","RangeError","Object","keys","left","right","Codec","encoder","baseX","alphabet","basex","coerce","rfc4648","bitsPerChar","data","pad","mask","out","bits","codes","end","written","value","SyntaxError","base32","base32upper","base32pad","base32padupper","base32hex","base32hexupper","base32hexpad","base32hexpadupper","base32z","base58btc","base58flickr","empty","toHex","d","reduce","hex","byte","toString","padStart","fromHex","hexes","match","map","b","parseInt","equals","aa","bb","ii","o","constructor","isBinary","fromString","TextEncoder","TextDecoder","CID","version","code","multihash","asCID","_baseCache","Map","defineProperties","hidden","readonly","DAG_PB_CODE","SHA_256_CODE","createV0","digest","Digest","createV1","other","base","toStringV0","toStringV1","hash","deprecate","IS_CID_DEPRECATION","cidSymbol","encodeCID","create","decodeFirst","cid","specs","inspectBytes","prefixSize","multihashSize","multihashBytes","subarray","digestBytes","digestSize","multihashCode","codec","initialBytes","offset","next","varint","parseCIDtoBytes","set","Symbol","toStringTag","for","cache","get","codeOffset","hashOffset","writable","configurable","enumerable","range","message","test","console","warn","node","sizeOffset","digestOffset","a","equalBytes","Hasher","result","then","sha","crypto","subtle","sha256","sha512","encode_1","num","oldOffset","INT","MSB","MSBALL","pow","read","buf","res","shift","counter","l","REST$1","MSB$1","N1","N2","N3","N4","N5","N6","N7","N8","N9","encodingLength","encodeTo","int","target","allocUnsafe","globalThis","Buffer","asUint8Array","concat","arrays","acc","curr","output","arr","encoding","bases","identity","base2","base8","base10","base16","base16upper","base36","base36upper","base64","base64pad","base64url","base64urlpad","alphabetBytesToChars","p","c","alphabetCharsToBytes","base256emoji","byts","char","byt","push","textEncoder","textDecoder","parse","identityBase","base58","sha2","createCodec","substring","ascii","String","fromCharCode","utf8","latin1","binary"],"sourceRoot":""}